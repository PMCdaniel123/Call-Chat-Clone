/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["src_components_Chat_VoiceMessage_jsx"],{

/***/ "./src/components/Chat/VoiceMessage.jsx":
/*!**********************************************!*\
  !*** ./src/components/Chat/VoiceMessage.jsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _context_StateContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/context/StateContext */ \"./src/context/StateContext.jsx\");\n/* harmony import */ var _utils_ApiRoutes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/ApiRoutes */ \"./src/utils/ApiRoutes.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _common_Avatar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/Avatar */ \"./src/components/common/Avatar.jsx\");\n/* harmony import */ var react_icons_fa__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-icons/fa */ \"./node_modules/react-icons/fa/index.esm.js\");\n/* harmony import */ var _utils_CalculateTime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/utils/CalculateTime */ \"./src/utils/CalculateTime.js\");\n/* harmony import */ var _common_MessageStatus__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/MessageStatus */ \"./src/components/common/MessageStatus.jsx\");\n/* harmony import */ var wavesurfer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! wavesurfer.js */ \"./node_modules/wavesurfer.js/dist/wavesurfer.js\");\n/* harmony import */ var wavesurfer_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(wavesurfer_js__WEBPACK_IMPORTED_MODULE_7__);\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nfunction VoiceMessage(param) {\n    let { message  } = param;\n    _s();\n    const [{ userInfo , currentChatUser , socket  }, dispatch] = (0,_context_StateContext__WEBPACK_IMPORTED_MODULE_1__.useStateProvider)();\n    console.log(userInfo);\n    const [audioMessage, setAudioMessage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [currentPlaybackTime, setCurrentPlaybackTime] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [totalDuration, setTotalDuration] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const waveformRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const waveform = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (waveform.current === null) {\n            waveform.current = wavesurfer_js__WEBPACK_IMPORTED_MODULE_7___default().create({\n                container: waveformRef.current,\n                waveColor: \"#ccc\",\n                progressColor: \"#4a9eff\",\n                cursorColor: \"#7ae3c3\",\n                barWidth: 2,\n                height: 30,\n                responsive: true\n            });\n            waveform.current.on(\"finish\", ()=>{\n                setIsPlaying(false);\n            });\n        }\n        return ()=>{\n            // waveform.current.destroy();\n            if (waveform.current) {\n                waveform.current.destroy();\n                waveform.current = null;\n            }\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const audioURL = \"\".concat(_utils_ApiRoutes__WEBPACK_IMPORTED_MODULE_2__.HOST, \"/\").concat(message.message);\n        const audio = new Audio(audioURL);\n        setAudioMessage(audio);\n        waveform.current.load(audioURL);\n        waveform.current.on(\"ready\", ()=>{\n            setTotalDuration(waveform.current.getDuration());\n        });\n    }, [\n        message.message\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (audioMessage) {\n            const updatePlaybackTime = ()=>{\n                setCurrentPlaybackTime(audioMessage.currentTime);\n            };\n            audioMessage.addEventListener(\"timeupdate\", updatePlaybackTime);\n            return ()=>audioMessage.removeEventListener(\"timeupdate\", updatePlaybackTime);\n        }\n    }, [\n        audioMessage\n    ]);\n    const handlePlayAudio = ()=>{\n        if (audioMessage) {\n            waveform.current.stop();\n            waveform.current.play();\n            audioMessage.play();\n            setIsPlaying(true);\n        }\n    };\n    const handlePauseAudio = ()=>{\n        waveform.current.stop();\n        audioMessage.pause();\n        setIsPlaying(false);\n    };\n    const formatTime = (time)=>{\n        if (isNaN(time)) {\n            return \"00:00\";\n        }\n        const minutes = Math.floor(time / 60);\n        const seconds = Math.floor(time % 60);\n        return \"\".concat(minutes.toString().padStart(2, \"0\"), \":\").concat(seconds.toString().padStart(2, \"0\"));\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex items-center gap-5 text-white px-4 pr-2 py-4 text-sm rounded-md \".concat((message === null || message === void 0 ? void 0 : message.senderId) === (currentChatUser === null || currentChatUser === void 0 ? void 0 : currentChatUser.id) ? \"bg-incoming-background\" : \"bg-outgoing-background\"),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_common_Avatar__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    type: \"lg\",\n                    image: (message === null || message === void 0 ? void 0 : message.senderId) === (userInfo === null || userInfo === void 0 ? void 0 : userInfo.id) ? userInfo === null || userInfo === void 0 ? void 0 : userInfo.profileImage : currentChatUser === null || currentChatUser === void 0 ? void 0 : currentChatUser.profilePicture\n                }, void 0, false, {\n                    fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                    lineNumber: 103,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                lineNumber: 102,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"cursor-pointer text-xl\",\n                children: !isPlaying ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fa__WEBPACK_IMPORTED_MODULE_8__.FaPlay, {\n                    onClick: handlePlayAudio\n                }, void 0, false, {\n                    fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                    lineNumber: 114,\n                    columnNumber: 11\n                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fa__WEBPACK_IMPORTED_MODULE_8__.FaStop, {\n                    onClick: handlePauseAudio\n                }, void 0, false, {\n                    fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                    lineNumber: 116,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                lineNumber: 112,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"w-60\",\n                        ref: waveformRef\n                    }, void 0, false, {\n                        fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                        lineNumber: 120,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-bubble-meta text-[11px] pt-1 flex justify-between absolute bottom-[-22px] w-full\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                children: formatTime(isPlaying ? currentPlaybackTime : totalDuration)\n                            }, void 0, false, {\n                                fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                                lineNumber: 122,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex gap-1\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: (0,_utils_CalculateTime__WEBPACK_IMPORTED_MODULE_5__.calculateTime)(message === null || message === void 0 ? void 0 : message.createdAt)\n                                    }, void 0, false, {\n                                        fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                                        lineNumber: 126,\n                                        columnNumber: 13\n                                    }, this),\n                                    (message === null || message === void 0 ? void 0 : message.senderId) === (userInfo === null || userInfo === void 0 ? void 0 : userInfo.id) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_common_MessageStatus__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                        messageStatus: message === null || message === void 0 ? void 0 : message.messageStatus\n                                    }, void 0, false, {\n                                        fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                                        lineNumber: 128,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                                lineNumber: 125,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                        lineNumber: 121,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n                lineNumber: 119,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"E:\\\\Socket.io\\\\client\\\\src\\\\components\\\\Chat\\\\VoiceMessage.jsx\",\n        lineNumber: 95,\n        columnNumber: 5\n    }, this);\n}\n_s(VoiceMessage, \"Qi6wnt7TRBTIhg9u5s+YPn87Ato=\", false, function() {\n    return [\n        _context_StateContext__WEBPACK_IMPORTED_MODULE_1__.useStateProvider\n    ];\n});\n_c = VoiceMessage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (VoiceMessage);\nvar _c;\n$RefreshReg$(_c, \"VoiceMessage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/Chat/VoiceMessage.jsx\n"));

/***/ }),

/***/ "./node_modules/wavesurfer.js/dist/wavesurfer.js":
/*!*******************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/wavesurfer.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/*!\n * wavesurfer.js 6.6.4 (2023-06-10)\n * https://wavesurfer-js.org\n * @license BSD-3-Clause\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(self, () => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./src/drawer.canvasentry.js\":\n/*!***********************************!*\\\n  !*** ./src/drawer.canvasentry.js ***!\n  \\***********************************/\n/***/ ((module, exports, __nested_webpack_require_742__) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _style = _interopRequireDefault(__nested_webpack_require_742__(/*! ./util/style */ \"./src/util/style.js\"));\nvar _getId = _interopRequireDefault(__nested_webpack_require_742__(/*! ./util/get-id */ \"./src/util/get-id.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nvar CanvasEntry = /*#__PURE__*/function () {\n  function CanvasEntry() {\n    _classCallCheck(this, CanvasEntry);\n    /**\n     * The wave node\n     *\n     * @type {HTMLCanvasElement}\n     */\n    this.wave = null;\n    /**\n     * The wave canvas rendering context\n     *\n     * @type {CanvasRenderingContext2D}\n     */\n    this.waveCtx = null;\n    /**\n     * The (optional) progress wave node\n     *\n     * @type {HTMLCanvasElement}\n     */\n    this.progress = null;\n    /**\n     * The (optional) progress wave canvas rendering context\n     *\n     * @type {CanvasRenderingContext2D}\n     */\n    this.progressCtx = null;\n    /**\n     * Start of the area the canvas should render, between 0 and 1\n     *\n     * @type {number}\n     */\n    this.start = 0;\n    /**\n     * End of the area the canvas should render, between 0 and 1\n     *\n     * @type {number}\n     */\n    this.end = 1;\n    /**\n     * Unique identifier for this entry\n     *\n     * @type {string}\n     */\n    this.id = (0, _getId.default)(typeof this.constructor.name !== 'undefined' ? this.constructor.name.toLowerCase() + '_' : 'canvasentry_');\n    /**\n     * Canvas 2d context attributes\n     *\n     * @type {object}\n     */\n    this.canvasContextAttributes = {};\n  }\n\n  /**\n   * Store the wave canvas element and create the 2D rendering context\n   *\n   * @param {HTMLCanvasElement} element The wave `canvas` element.\n   */\n  _createClass(CanvasEntry, [{\n    key: \"initWave\",\n    value: function initWave(element) {\n      this.wave = element;\n      this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n  }, {\n    key: \"initProgress\",\n    value: function initProgress(element) {\n      this.progress = element;\n      this.progressCtx = this.progress.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n  }, {\n    key: \"updateDimensions\",\n    value: function updateDimensions(elementWidth, totalWidth, width, height) {\n      // where the canvas starts and ends in the waveform, represented as a\n      // decimal between 0 and 1\n      this.start = this.wave.offsetLeft / totalWidth || 0;\n      this.end = this.start + elementWidth / totalWidth;\n\n      // set wave canvas dimensions\n      this.wave.width = width;\n      this.wave.height = height;\n      var elementSize = {\n        width: elementWidth + 'px'\n      };\n      (0, _style.default)(this.wave, elementSize);\n      if (this.hasProgressCanvas) {\n        // set progress canvas dimensions\n        this.progress.width = width;\n        this.progress.height = height;\n        (0, _style.default)(this.progress, elementSize);\n      }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n  }, {\n    key: \"clearWave\",\n    value: function clearWave() {\n      // wave\n      this.waveCtx.clearRect(0, 0, this.waveCtx.canvas.width, this.waveCtx.canvas.height);\n\n      // progress\n      if (this.hasProgressCanvas) {\n        this.progressCtx.clearRect(0, 0, this.progressCtx.canvas.width, this.progressCtx.canvas.height);\n      }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     * @param {string|string[]} waveColor Fill color for the wave canvas,\n     * or an array of colors to apply as a gradient\n     * @param {?string|string[]} progressColor Fill color for the progress canvas,\n     * or an array of colors to apply as a gradient\n     */\n  }, {\n    key: \"setFillStyles\",\n    value: function setFillStyles(waveColor, progressColor) {\n      this.waveCtx.fillStyle = this.getFillStyle(this.waveCtx, waveColor);\n      if (this.hasProgressCanvas) {\n        this.progressCtx.fillStyle = this.getFillStyle(this.progressCtx, progressColor);\n      }\n    }\n\n    /**\n     * Utility function to handle wave color arguments\n     *\n     * When the color argument type is a string or CanvasGradient instance,\n     * it will be returned as is. Otherwise, it will be treated as an array,\n     * and a new CanvasGradient will be returned\n     *\n     * @since 6.0.0\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {string|string[]|CanvasGradient} color Either a single fill color\n     *     for the wave canvas, an existing CanvasGradient instance, or an array\n     *     of colors to apply as a gradient\n     * @returns {string|CanvasGradient} Returns a string fillstyle value, or a\n     *     canvas gradient\n     */\n  }, {\n    key: \"getFillStyle\",\n    value: function getFillStyle(ctx, color) {\n      if (typeof color == 'string' || color instanceof CanvasGradient) {\n        return color;\n      }\n      var waveGradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\n      color.forEach(function (value, index) {\n        return waveGradient.addColorStop(index / color.length, value);\n      });\n      return waveGradient;\n    }\n\n    /**\n     * Set the canvas transforms for wave and progress\n     *\n     * @param {boolean} vertical Whether to render vertically\n     */\n  }, {\n    key: \"applyCanvasTransforms\",\n    value: function applyCanvasTransforms(vertical) {\n      if (vertical) {\n        // Reflect the waveform across the line y = -x\n        this.waveCtx.setTransform(0, 1, 1, 0, 0, 0);\n        if (this.hasProgressCanvas) {\n          this.progressCtx.setTransform(0, 1, 1, 0, 0, 0);\n        }\n      }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n  }, {\n    key: \"fillRects\",\n    value: function fillRects(x, y, width, height, radius) {\n      this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n      if (this.hasProgressCanvas) {\n        this.fillRectToContext(this.progressCtx, x, y, width, height, radius);\n      }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n  }, {\n    key: \"fillRectToContext\",\n    value: function fillRectToContext(ctx, x, y, width, height, radius) {\n      if (!ctx) {\n        return;\n      }\n      if (radius) {\n        this.drawRoundedRect(ctx, x, y, width, height, radius);\n      } else {\n        ctx.fillRect(x, y, width, height);\n      }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n  }, {\n    key: \"drawRoundedRect\",\n    value: function drawRoundedRect(ctx, x, y, width, height, radius) {\n      if (height === 0) {\n        return;\n      }\n      // peaks are float values from -1 to 1. Use absolute height values in\n      // order to correctly calculate rounded rectangle coordinates\n      if (height < 0) {\n        height *= -1;\n        y -= height;\n      }\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n  }, {\n    key: \"drawLines\",\n    value: function drawLines(peaks, absmax, halfH, offsetY, start, end) {\n      this.drawLineToContext(this.waveCtx, peaks, absmax, halfH, offsetY, start, end);\n      if (this.hasProgressCanvas) {\n        this.drawLineToContext(this.progressCtx, peaks, absmax, halfH, offsetY, start, end);\n      }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n  }, {\n    key: \"drawLineToContext\",\n    value: function drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n      if (!ctx) {\n        return;\n      }\n      var length = peaks.length / 2;\n      var first = Math.round(length * this.start);\n\n      // use one more peak value to make sure we join peaks at ends -- unless,\n      // of course, this is the last canvas\n      var last = Math.round(length * this.end) + 1;\n      var canvasStart = first;\n      var canvasEnd = last;\n      var scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n      // optimization\n      var halfOffset = halfH + offsetY;\n      var absmaxHalf = absmax / halfH;\n      ctx.beginPath();\n      ctx.moveTo((canvasStart - first) * scale, halfOffset);\n      ctx.lineTo((canvasStart - first) * scale, halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf));\n      var i, peak, h;\n      for (i = canvasStart; i < canvasEnd; i++) {\n        peak = peaks[2 * i] || 0;\n        h = Math.round(peak / absmaxHalf);\n        ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n      }\n\n      // draw the bottom edge going backwards, to make a single\n      // closed hull to fill\n      var j = canvasEnd - 1;\n      for (j; j >= canvasStart; j--) {\n        peak = peaks[2 * j + 1] || 0;\n        h = Math.round(peak / absmaxHalf);\n        ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n      }\n      ctx.lineTo((canvasStart - first) * scale, halfOffset - Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf));\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.waveCtx = null;\n      this.wave = null;\n      this.progressCtx = null;\n      this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(format, quality, type) {\n      var _this = this;\n      if (type === 'blob') {\n        return new Promise(function (resolve) {\n          _this.wave.toBlob(resolve, format, quality);\n        });\n      } else if (type === 'dataURL') {\n        return this.wave.toDataURL(format, quality);\n      }\n    }\n  }]);\n  return CanvasEntry;\n}();\nexports[\"default\"] = CanvasEntry;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/drawer.js\":\n/*!***********************!*\\\n  !*** ./src/drawer.js ***!\n  \\***********************/\n/***/ ((module, exports, __nested_webpack_require_15928__) => {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar util = _interopRequireWildcard(__nested_webpack_require_15928__(/*! ./util */ \"./src/util/index.js\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nvar Drawer = /*#__PURE__*/function (_util$Observer) {\n  _inherits(Drawer, _util$Observer);\n  var _super = _createSuper(Drawer);\n  /**\n   * @param {HTMLElement} container The container node of the wavesurfer instance\n   * @param {WavesurferParams} params The wavesurfer initialisation options\n   */\n  function Drawer(container, params) {\n    var _this;\n    _classCallCheck(this, Drawer);\n    _this = _super.call(this);\n    _this.container = util.withOrientation(container, params.vertical);\n    /**\n     * @type {WavesurferParams}\n     */\n    _this.params = params;\n    /**\n     * The width of the renderer\n     * @type {number}\n     */\n    _this.width = 0;\n    /**\n     * The height of the renderer\n     * @type {number}\n     */\n    _this.height = params.height * _this.params.pixelRatio;\n    _this.lastPos = 0;\n    /**\n     * The `<wave>` element which is added to the container\n     * @type {HTMLElement}\n     */\n    _this.wrapper = null;\n    return _this;\n  }\n\n  /**\n   * Alias of `util.style`\n   *\n   * @param {HTMLElement} el The element that the styles will be applied to\n   * @param {Object} styles The map of propName: attribute, both are used as-is\n   * @return {HTMLElement} el\n   */\n  _createClass(Drawer, [{\n    key: \"style\",\n    value: function style(el, styles) {\n      return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n  }, {\n    key: \"createWrapper\",\n    value: function createWrapper() {\n      this.wrapper = util.withOrientation(this.container.appendChild(document.createElement('wave')), this.params.vertical);\n      this.style(this.wrapper, {\n        display: 'block',\n        position: 'relative',\n        userSelect: 'none',\n        webkitUserSelect: 'none',\n        height: this.params.height + 'px'\n      });\n      if (this.params.fillParent || this.params.scrollParent) {\n        this.style(this.wrapper, {\n          width: '100%',\n          cursor: this.params.hideCursor ? 'none' : 'auto',\n          overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n          overflowY: 'hidden'\n        });\n      }\n      this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e, noPrevent) {\n      !noPrevent && e.preventDefault();\n      var clientX = util.withOrientation(e.targetTouches ? e.targetTouches[0] : e, this.params.vertical).clientX;\n      var bbox = this.wrapper.getBoundingClientRect();\n      var nominalWidth = this.width;\n      var parentWidth = this.getWidth();\n      var progressPixels = this.getProgressPixels(bbox, clientX);\n      var progress;\n      if (!this.params.fillParent && nominalWidth < parentWidth) {\n        progress = progressPixels * (this.params.pixelRatio / nominalWidth) || 0;\n      } else {\n        progress = (progressPixels + this.wrapper.scrollLeft) / this.wrapper.scrollWidth || 0;\n      }\n      return util.clamp(progress, 0, 1);\n    }\n  }, {\n    key: \"getProgressPixels\",\n    value: function getProgressPixels(wrapperBbox, clientX) {\n      if (this.params.rtl) {\n        return wrapperBbox.right - clientX;\n      } else {\n        return clientX - wrapperBbox.left;\n      }\n    }\n  }, {\n    key: \"setupWrapperEvents\",\n    value: function setupWrapperEvents() {\n      var _this2 = this;\n      this.wrapper.addEventListener('click', function (e) {\n        var orientedEvent = util.withOrientation(e, _this2.params.vertical);\n        var scrollbarHeight = _this2.wrapper.offsetHeight - _this2.wrapper.clientHeight;\n        if (scrollbarHeight !== 0) {\n          // scrollbar is visible.  Check if click was on it\n          var bbox = _this2.wrapper.getBoundingClientRect();\n          if (orientedEvent.clientY >= bbox.bottom - scrollbarHeight) {\n            // ignore mousedown as it was on the scrollbar\n            return;\n          }\n        }\n        if (_this2.params.interact) {\n          _this2.fireEvent('click', e, _this2.handleEvent(e));\n        }\n      });\n      this.wrapper.addEventListener('dblclick', function (e) {\n        if (_this2.params.interact) {\n          _this2.fireEvent('dblclick', e, _this2.handleEvent(e));\n        }\n      });\n      this.wrapper.addEventListener('scroll', function (e) {\n        return _this2.fireEvent('scroll', e);\n      });\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n  }, {\n    key: \"drawPeaks\",\n    value: function drawPeaks(peaks, length, start, end) {\n      if (!this.setWidth(length)) {\n        this.clearWave();\n      }\n      this.params.barWidth ? this.drawBars(peaks, 0, start, end) : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n  }, {\n    key: \"resetScroll\",\n    value: function resetScroll() {\n      if (this.wrapper !== null) {\n        this.wrapper.scrollLeft = 0;\n      }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n  }, {\n    key: \"recenter\",\n    value: function recenter(percent) {\n      var position = this.wrapper.scrollWidth * percent;\n      this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n  }, {\n    key: \"recenterOnPosition\",\n    value: function recenterOnPosition(position, immediate) {\n      var scrollLeft = this.wrapper.scrollLeft;\n      var half = ~~(this.wrapper.clientWidth / 2);\n      var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n      var target = position - half;\n      var offset = target - scrollLeft;\n      if (maxScroll == 0) {\n        // no need to continue if scrollbar is not there\n        return;\n      }\n\n      // if the cursor is currently visible...\n      if (!immediate && -half <= offset && offset < half) {\n        // set rate at which waveform is centered\n        var rate = this.params.autoCenterRate;\n\n        // make rate depend on width of view and length of waveform\n        rate /= half;\n        rate *= maxScroll;\n        offset = Math.max(-rate, Math.min(rate, offset));\n        target = scrollLeft + offset;\n      }\n\n      // limit target to valid range (0 to maxScroll)\n      target = Math.max(0, Math.min(maxScroll, target));\n      // no use attempting to scroll if we're not moving\n      if (target != scrollLeft) {\n        this.wrapper.scrollLeft = target;\n      }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n  }, {\n    key: \"getScrollX\",\n    value: function getScrollX() {\n      var x = 0;\n      if (this.wrapper) {\n        var pixelRatio = this.params.pixelRatio;\n        x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n        // In cases of elastic scroll (safari with mouse wheel) you can\n        // scroll beyond the limits of the container\n        // Calculate and floor the scrollable extent to make sure an out\n        // of bounds value is not returned\n        // Ticket #1312\n        if (this.params.scrollParent) {\n          var maxScroll = ~~(this.wrapper.scrollWidth * pixelRatio - this.getWidth());\n          x = Math.min(maxScroll, Math.max(0, x));\n        }\n      }\n      return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      if (this.width == width) {\n        return false;\n      }\n      this.width = width;\n      if (this.params.fillParent || this.params.scrollParent) {\n        this.style(this.wrapper, {\n          width: ''\n        });\n      } else {\n        var newWidth = ~~(this.width / this.params.pixelRatio) + 'px';\n        this.style(this.wrapper, {\n          width: newWidth\n        });\n      }\n      this.updateSize();\n      return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(height) {\n      if (height == this.height) {\n        return false;\n      }\n      this.height = height;\n      this.style(this.wrapper, {\n        height: ~~(this.height / this.params.pixelRatio) + 'px'\n      });\n      this.updateSize();\n      return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n  }, {\n    key: \"progress\",\n    value: function progress(_progress) {\n      var minPxDelta = 1 / this.params.pixelRatio;\n      var pos = Math.round(_progress * this.width) * minPxDelta;\n      if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n        this.lastPos = pos;\n        if (this.params.scrollParent && this.params.autoCenter) {\n          var newPos = ~~(this.wrapper.scrollWidth * _progress);\n          this.recenterOnPosition(newPos, this.params.autoCenterImmediately);\n        }\n        this.updateProgress(pos);\n      }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.unAll();\n      if (this.wrapper) {\n        if (this.wrapper.parentNode == this.container.domElement) {\n          this.container.removeChild(this.wrapper.domElement);\n        }\n        this.wrapper = null;\n      }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n  }, {\n    key: \"updateCursor\",\n    value: function updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n  }, {\n    key: \"drawBars\",\n    value: function drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n  }, {\n    key: \"drawWave\",\n    value: function drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n  }, {\n    key: \"clearWave\",\n    value: function clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n  }, {\n    key: \"updateProgress\",\n    value: function updateProgress(position) {}\n  }]);\n  return Drawer;\n}(util.Observer);\nexports[\"default\"] = Drawer;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/drawer.multicanvas.js\":\n/*!***********************************!*\\\n  !*** ./src/drawer.multicanvas.js ***!\n  \\***********************************/\n/***/ ((module, exports, __nested_webpack_require_33763__) => {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _drawer = _interopRequireDefault(__nested_webpack_require_33763__(/*! ./drawer */ \"./src/drawer.js\"));\nvar util = _interopRequireWildcard(__nested_webpack_require_33763__(/*! ./util */ \"./src/util/index.js\"));\nvar _drawer2 = _interopRequireDefault(__nested_webpack_require_33763__(/*! ./drawer.canvasentry */ \"./src/drawer.canvasentry.js\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nvar MultiCanvas = /*#__PURE__*/function (_Drawer) {\n  _inherits(MultiCanvas, _Drawer);\n  var _super = _createSuper(MultiCanvas);\n  /**\n   * @param {HTMLElement} container The container node of the wavesurfer instance\n   * @param {WavesurferParams} params The wavesurfer initialisation options\n   */\n  function MultiCanvas(container, params) {\n    var _this;\n    _classCallCheck(this, MultiCanvas);\n    _this = _super.call(this, container, params);\n\n    /**\n     * @type {number}\n     */\n    _this.maxCanvasWidth = params.maxCanvasWidth;\n\n    /**\n     * @type {number}\n     */\n    _this.maxCanvasElementWidth = Math.round(params.maxCanvasWidth / params.pixelRatio);\n\n    /**\n     * Whether or not the progress wave is rendered. If the `waveColor`\n     * and `progressColor` are the same color it is not.\n     *\n     * @type {boolean}\n     */\n    _this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n    /**\n     * @type {number}\n     */\n    _this.halfPixel = 0.5 / params.pixelRatio;\n\n    /**\n     * List of `CanvasEntry` instances.\n     *\n     * @type {Array}\n     */\n    _this.canvases = [];\n\n    /**\n     * @type {HTMLElement}\n     */\n    _this.progressWave = null;\n\n    /**\n     * Class used to generate entries.\n     *\n     * @type {function}\n     */\n    _this.EntryClass = _drawer2.default;\n\n    /**\n     * Canvas 2d context attributes.\n     *\n     * @type {object}\n     */\n    _this.canvasContextAttributes = params.drawingContextAttributes;\n\n    /**\n     * Overlap added between entries to prevent vertical white stripes\n     * between `canvas` elements.\n     *\n     * @type {number}\n     */\n    _this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n    /**\n     * The radius of the wave bars. Makes bars rounded\n     *\n     * @type {number}\n     */\n    _this.barRadius = params.barRadius || 0;\n\n    /**\n     * Whether to render the waveform vertically. Defaults to false.\n     *\n     * @type {boolean}\n     */\n    _this.vertical = params.vertical;\n    return _this;\n  }\n\n  /**\n   * Initialize the drawer\n   */\n  _createClass(MultiCanvas, [{\n    key: \"init\",\n    value: function init() {\n      this.createWrapper();\n      this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     */\n  }, {\n    key: \"createElements\",\n    value: function createElements() {\n      this.progressWave = util.withOrientation(this.wrapper.appendChild(document.createElement('wave')), this.params.vertical);\n      this.style(this.progressWave, {\n        position: 'absolute',\n        zIndex: 3,\n        left: 0,\n        top: 0,\n        bottom: 0,\n        overflow: 'hidden',\n        width: '0',\n        display: 'none',\n        boxSizing: 'border-box',\n        borderRightStyle: 'solid',\n        pointerEvents: 'none'\n      });\n      this.addCanvas();\n      this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n  }, {\n    key: \"updateCursor\",\n    value: function updateCursor() {\n      this.style(this.progressWave, {\n        borderRightWidth: this.params.cursorWidth + 'px',\n        borderRightColor: this.params.cursorColor\n      });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var _this2 = this;\n      var totalWidth = Math.round(this.width / this.params.pixelRatio);\n      var requiredCanvases = Math.ceil(totalWidth / (this.maxCanvasElementWidth + this.overlap));\n\n      // add required canvases\n      while (this.canvases.length < requiredCanvases) {\n        this.addCanvas();\n      }\n\n      // remove older existing canvases, if any\n      while (this.canvases.length > requiredCanvases) {\n        this.removeCanvas();\n      }\n      var canvasWidth = this.maxCanvasWidth + this.overlap;\n      var lastCanvas = this.canvases.length - 1;\n      this.canvases.forEach(function (entry, i) {\n        if (i == lastCanvas) {\n          canvasWidth = _this2.width - _this2.maxCanvasWidth * lastCanvas;\n        }\n        _this2.updateDimensions(entry, canvasWidth, _this2.height);\n        entry.clearWave();\n      });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     */\n  }, {\n    key: \"addCanvas\",\n    value: function addCanvas() {\n      var entry = new this.EntryClass();\n      entry.canvasContextAttributes = this.canvasContextAttributes;\n      entry.hasProgressCanvas = this.hasProgressCanvas;\n      entry.halfPixel = this.halfPixel;\n      var leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n      // wave\n      var wave = util.withOrientation(this.wrapper.appendChild(document.createElement('canvas')), this.params.vertical);\n      this.style(wave, {\n        position: 'absolute',\n        zIndex: 2,\n        left: leftOffset + 'px',\n        top: 0,\n        bottom: 0,\n        height: '100%',\n        pointerEvents: 'none'\n      });\n      entry.initWave(wave);\n\n      // progress\n      if (this.hasProgressCanvas) {\n        var progress = util.withOrientation(this.progressWave.appendChild(document.createElement('canvas')), this.params.vertical);\n        this.style(progress, {\n          position: 'absolute',\n          left: leftOffset + 'px',\n          top: 0,\n          bottom: 0,\n          height: '100%'\n        });\n        entry.initProgress(progress);\n      }\n      this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     */\n  }, {\n    key: \"removeCanvas\",\n    value: function removeCanvas() {\n      var lastEntry = this.canvases[this.canvases.length - 1];\n\n      // wave\n      lastEntry.wave.parentElement.removeChild(lastEntry.wave.domElement);\n\n      // progress\n      if (this.hasProgressCanvas) {\n        lastEntry.progress.parentElement.removeChild(lastEntry.progress.domElement);\n      }\n\n      // cleanup\n      if (lastEntry) {\n        lastEntry.destroy();\n        lastEntry = null;\n      }\n      this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n  }, {\n    key: \"updateDimensions\",\n    value: function updateDimensions(entry, width, height) {\n      var elementWidth = Math.round(width / this.params.pixelRatio);\n      var totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n      // update canvas dimensions\n      entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n      // style element\n      this.style(this.progressWave, {\n        display: 'block'\n      });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n  }, {\n    key: \"clearWave\",\n    value: function clearWave() {\n      var _this3 = this;\n      util.frame(function () {\n        _this3.canvases.forEach(function (entry) {\n          return entry.clearWave();\n        });\n      })();\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n  }, {\n    key: \"drawBars\",\n    value: function drawBars(peaks, channelIndex, start, end) {\n      var _this4 = this;\n      return this.prepareDraw(peaks, channelIndex, start, end, function (_ref) {\n        var absmax = _ref.absmax,\n          hasMinVals = _ref.hasMinVals,\n          height = _ref.height,\n          offsetY = _ref.offsetY,\n          halfH = _ref.halfH,\n          peaks = _ref.peaks,\n          ch = _ref.channelIndex;\n        // if drawBars was called within ws.empty we don't pass a start and\n        // don't want anything to happen\n        if (start === undefined) {\n          return;\n        }\n        // Skip every other value if there are negatives.\n        var peakIndexScale = hasMinVals ? 2 : 1;\n        var length = peaks.length / peakIndexScale;\n        var bar = _this4.params.barWidth * _this4.params.pixelRatio;\n        var gap = _this4.params.barGap === null ? Math.max(_this4.params.pixelRatio, ~~(bar / 2)) : Math.max(_this4.params.pixelRatio, _this4.params.barGap * _this4.params.pixelRatio);\n        var step = bar + gap;\n        var scale = length / _this4.width;\n        var first = start;\n        var last = end;\n        var peakIndex = first;\n        for (peakIndex; peakIndex < last; peakIndex += step) {\n          // search for the highest peak in the range this bar falls into\n          var peak = 0;\n          var peakIndexRange = Math.floor(peakIndex * scale) * peakIndexScale; // start index\n          var peakIndexEnd = Math.floor((peakIndex + step) * scale) * peakIndexScale;\n          do {\n            // do..while makes sure at least one peak is always evaluated\n            var newPeak = Math.abs(peaks[peakIndexRange]); // for arrays starting with negative values\n            if (newPeak > peak) {\n              peak = newPeak; // higher\n            }\n\n            peakIndexRange += peakIndexScale; // skip every other value for negatives\n          } while (peakIndexRange < peakIndexEnd);\n\n          // calculate the height of this bar according to the highest peak found\n          var h = Math.round(peak / absmax * halfH);\n\n          // raise the bar height to the specified minimum height\n          // Math.max is used to replace any value smaller than barMinHeight (not just 0) with barMinHeight\n          if (_this4.params.barMinHeight) {\n            h = Math.max(h, _this4.params.barMinHeight);\n          }\n          _this4.fillRect(peakIndex + _this4.halfPixel, halfH - h + offsetY, bar + _this4.halfPixel, h * 2, _this4.barRadius, ch);\n        }\n      });\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n  }, {\n    key: \"drawWave\",\n    value: function drawWave(peaks, channelIndex, start, end) {\n      var _this5 = this;\n      return this.prepareDraw(peaks, channelIndex, start, end, function (_ref2) {\n        var absmax = _ref2.absmax,\n          hasMinVals = _ref2.hasMinVals,\n          height = _ref2.height,\n          offsetY = _ref2.offsetY,\n          halfH = _ref2.halfH,\n          peaks = _ref2.peaks,\n          channelIndex = _ref2.channelIndex;\n        if (!hasMinVals) {\n          var reflectedPeaks = [];\n          var len = peaks.length;\n          var i = 0;\n          for (i; i < len; i++) {\n            reflectedPeaks[2 * i] = peaks[i];\n            reflectedPeaks[2 * i + 1] = -peaks[i];\n          }\n          peaks = reflectedPeaks;\n        }\n\n        // if drawWave was called within ws.empty we don't pass a start and\n        // end and simply want a flat line\n        if (start !== undefined) {\n          _this5.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n        }\n\n        // always draw a median line\n        _this5.fillRect(0, halfH + offsetY - _this5.halfPixel, _this5.width, _this5.halfPixel, _this5.barRadius, channelIndex);\n      });\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     * @param {channelIndex} channelIndex The channel index of the line drawn\n     */\n  }, {\n    key: \"drawLine\",\n    value: function drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n      var _this6 = this;\n      var _ref3 = this.params.splitChannelsOptions.channelColors[channelIndex] || {},\n        waveColor = _ref3.waveColor,\n        progressColor = _ref3.progressColor;\n      this.canvases.forEach(function (entry, i) {\n        _this6.setFillStyles(entry, waveColor, progressColor);\n        _this6.applyCanvasTransforms(entry, _this6.params.vertical);\n        entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n      });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     * @param {channelIndex} channelIndex The channel index of the bar drawn\n     */\n  }, {\n    key: \"fillRect\",\n    value: function fillRect(x, y, width, height, radius, channelIndex) {\n      var startCanvas = Math.floor(x / this.maxCanvasWidth);\n      var endCanvas = Math.min(Math.ceil((x + width) / this.maxCanvasWidth) + 1, this.canvases.length);\n      var i = startCanvas;\n      for (i; i < endCanvas; i++) {\n        var entry = this.canvases[i];\n        var leftOffset = i * this.maxCanvasWidth;\n        var intersection = {\n          x1: Math.max(x, i * this.maxCanvasWidth),\n          y1: y,\n          x2: Math.min(x + width, i * this.maxCanvasWidth + entry.wave.width),\n          y2: y + height\n        };\n        if (intersection.x1 < intersection.x2) {\n          var _ref4 = this.params.splitChannelsOptions.channelColors[channelIndex] || {},\n            waveColor = _ref4.waveColor,\n            progressColor = _ref4.progressColor;\n          this.setFillStyles(entry, waveColor, progressColor);\n          this.applyCanvasTransforms(entry, this.params.vertical);\n          entry.fillRects(intersection.x1 - leftOffset, intersection.y1, intersection.x2 - intersection.x1, intersection.y2 - intersection.y1, radius);\n        }\n      }\n    }\n\n    /**\n     * Returns whether to hide the channel from being drawn based on params.\n     *\n     * @param {number} channelIndex The index of the current channel.\n     * @returns {bool} True to hide the channel, false to draw.\n     */\n  }, {\n    key: \"hideChannel\",\n    value: function hideChannel(channelIndex) {\n      return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @param {number} drawIndex The index of the current channel after filtering.\n     * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\n     * @returns {void}\n     */\n  }, {\n    key: \"prepareDraw\",\n    value: function prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\n      var _this7 = this;\n      return util.frame(function () {\n        // Split channels and call this function with the channelIndex set\n        if (peaks[0] instanceof Array) {\n          var channels = peaks;\n          if (_this7.params.splitChannels) {\n            var filteredChannels = channels.filter(function (c, i) {\n              return !_this7.hideChannel(i);\n            });\n            if (!_this7.params.splitChannelsOptions.overlay) {\n              _this7.setHeight(Math.max(filteredChannels.length, 1) * _this7.params.height * _this7.params.pixelRatio);\n            }\n            var overallAbsMax;\n            if (_this7.params.splitChannelsOptions && _this7.params.splitChannelsOptions.relativeNormalization) {\n              // calculate maximum peak across channels to use for normalization\n              overallAbsMax = util.max(channels.map(function (channelPeaks) {\n                return util.absMax(channelPeaks);\n              }));\n            }\n            return channels.forEach(function (channelPeaks, i) {\n              return _this7.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax);\n            });\n          }\n          peaks = channels[0];\n        }\n\n        // Return and do not draw channel peaks if hidden.\n        if (_this7.hideChannel(channelIndex)) {\n          return;\n        }\n\n        // calculate maximum modulation value, either from the barHeight\n        // parameter or if normalize=true from the largest value in the peak\n        // set\n        var absmax = 1 / _this7.params.barHeight;\n        if (_this7.params.normalize) {\n          absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\n        }\n\n        // Bar wave draws the bottom only as a reflection of the top,\n        // so we don't need negative values\n        var hasMinVals = [].some.call(peaks, function (val) {\n          return val < 0;\n        });\n        var height = _this7.params.height * _this7.params.pixelRatio;\n        var halfH = height / 2;\n        var offsetY = height * drawIndex || 0;\n\n        // Override offsetY if overlay is true\n        if (_this7.params.splitChannelsOptions && _this7.params.splitChannelsOptions.overlay) {\n          offsetY = 0;\n        }\n        return fn({\n          absmax: absmax,\n          hasMinVals: hasMinVals,\n          height: height,\n          offsetY: offsetY,\n          halfH: halfH,\n          peaks: peaks,\n          channelIndex: channelIndex\n        });\n      })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {string} waveColor Wave color to draw this entry\n     * @param {string} progressColor Progress color to draw this entry\n     */\n  }, {\n    key: \"setFillStyles\",\n    value: function setFillStyles(entry) {\n      var waveColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.waveColor;\n      var progressColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.params.progressColor;\n      entry.setFillStyles(waveColor, progressColor);\n    }\n\n    /**\n     * Set the canvas transforms for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {boolean} vertical Whether to render the waveform vertically\n     */\n  }, {\n    key: \"applyCanvasTransforms\",\n    value: function applyCanvasTransforms(entry) {\n      var vertical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      entry.applyCanvasTransforms(vertical);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(format, quality, type) {\n      if (type === 'blob') {\n        return Promise.all(this.canvases.map(function (entry) {\n          return entry.getImage(format, quality, type);\n        }));\n      } else if (type === 'dataURL') {\n        var images = this.canvases.map(function (entry) {\n          return entry.getImage(format, quality, type);\n        });\n        return images.length > 1 ? images : images[0];\n      }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n  }, {\n    key: \"updateProgress\",\n    value: function updateProgress(position) {\n      this.style(this.progressWave, {\n        width: position + 'px'\n      });\n    }\n  }]);\n  return MultiCanvas;\n}(_drawer.default);\nexports[\"default\"] = MultiCanvas;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/mediaelement-webaudio.js\":\n/*!**************************************!*\\\n  !*** ./src/mediaelement-webaudio.js ***!\n  \\**************************************/\n/***/ ((module, exports, __nested_webpack_require_60531__) => {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _mediaelement = _interopRequireDefault(__nested_webpack_require_60531__(/*! ./mediaelement */ \"./src/mediaelement.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n/**\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\n * of the webaudio API.\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\n *\n * @since 3.2.0\n */\nvar MediaElementWebAudio = /*#__PURE__*/function (_MediaElement) {\n  _inherits(MediaElementWebAudio, _MediaElement);\n  var _super = _createSuper(MediaElementWebAudio);\n  /**\n   * Construct the backend\n   *\n   * @param {WavesurferParams} params Wavesurfer parameters\n   */\n  function MediaElementWebAudio(params) {\n    var _this;\n    _classCallCheck(this, MediaElementWebAudio);\n    _this = _super.call(this, params);\n    /** @private */\n    _this.params = params;\n    /** @private */\n    _this.sourceMediaElement = null;\n    return _this;\n  }\n\n  /**\n   * Initialise the backend, called in `wavesurfer.createBackend()`\n   */\n  _createClass(MediaElementWebAudio, [{\n    key: \"init\",\n    value: function init() {\n      this.setPlaybackRate(this.params.audioRate);\n      this.createTimer();\n      this.createVolumeNode();\n      this.createScriptNode();\n      this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @private\n     */\n  }, {\n    key: \"_load\",\n    value: function _load(media, peaks, preload) {\n      _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"_load\", this).call(this, media, peaks, preload);\n      this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n  }, {\n    key: \"createMediaElementSource\",\n    value: function createMediaElementSource(mediaElement) {\n      this.sourceMediaElement = this.ac.createMediaElementSource(mediaElement);\n      this.sourceMediaElement.connect(this.analyser);\n    }\n  }, {\n    key: \"play\",\n    value: function play(start, end) {\n      this.resumeAudioContext();\n      return _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"play\", this).call(this, start, end);\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"destroy\", this).call(this);\n      this.destroyWebAudio();\n    }\n  }]);\n  return MediaElementWebAudio;\n}(_mediaelement.default);\nexports[\"default\"] = MediaElementWebAudio;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/mediaelement.js\":\n/*!*****************************!*\\\n  !*** ./src/mediaelement.js ***!\n  \\*****************************/\n/***/ ((module, exports, __nested_webpack_require_68288__) => {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _webaudio = _interopRequireDefault(__nested_webpack_require_68288__(/*! ./webaudio */ \"./src/webaudio.js\"));\nvar util = _interopRequireWildcard(__nested_webpack_require_68288__(/*! ./util */ \"./src/util/index.js\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n/**\n * MediaElement backend\n */\nvar MediaElement = /*#__PURE__*/function (_WebAudio) {\n  _inherits(MediaElement, _WebAudio);\n  var _super = _createSuper(MediaElement);\n  /**\n   * Construct the backend\n   *\n   * @param {WavesurferParams} params Wavesurfer parameters\n   */\n  function MediaElement(params) {\n    var _this;\n    _classCallCheck(this, MediaElement);\n    _this = _super.call(this, params);\n    /** @private */\n    _this.params = params;\n\n    /**\n     * Initially a dummy media element to catch errors. Once `_load` is\n     * called, this will contain the actual `HTMLMediaElement`.\n     * @private\n     */\n    _this.media = {\n      currentTime: 0,\n      duration: 0,\n      paused: true,\n      playbackRate: 1,\n      play: function play() {},\n      pause: function pause() {},\n      volume: 0\n    };\n\n    /** @private */\n    _this.mediaType = params.mediaType.toLowerCase();\n    /** @private */\n    _this.elementPosition = params.elementPosition;\n    /** @private */\n    _this.peaks = null;\n    /** @private */\n    _this.playbackRate = 1;\n    /** @private */\n    _this.volume = 1;\n    /** @private */\n    _this.isMuted = false;\n    /** @private */\n    _this.buffer = null;\n    /** @private */\n    _this.onPlayEnd = null;\n    /** @private */\n    _this.mediaListeners = {};\n    return _this;\n  }\n\n  /**\n   * Initialise the backend, called in `wavesurfer.createBackend()`\n   */\n  _createClass(MediaElement, [{\n    key: \"init\",\n    value: function init() {\n      this.setPlaybackRate(this.params.audioRate);\n      this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n  }, {\n    key: \"_setupMediaListeners\",\n    value: function _setupMediaListeners() {\n      var _this2 = this;\n      this.mediaListeners.error = function () {\n        _this2.fireEvent('error', 'Error loading media element');\n      };\n      this.mediaListeners.waiting = function () {\n        _this2.fireEvent('waiting');\n      };\n      this.mediaListeners.canplay = function () {\n        _this2.fireEvent('canplay');\n      };\n      this.mediaListeners.ended = function () {\n        _this2.fireEvent('finish');\n      };\n      // listen to and relay play, pause and seeked events to enable\n      // playback control from the external media element\n      this.mediaListeners.play = function () {\n        _this2.fireEvent('play');\n      };\n      this.mediaListeners.pause = function () {\n        _this2.fireEvent('pause');\n      };\n      this.mediaListeners.seeked = function (event) {\n        _this2.fireEvent('seek');\n      };\n      this.mediaListeners.volumechange = function (event) {\n        _this2.isMuted = _this2.media.muted;\n        if (_this2.isMuted) {\n          _this2.volume = 0;\n        } else {\n          _this2.volume = _this2.media.volume;\n        }\n        _this2.fireEvent('volume');\n      };\n\n      // reset event listeners\n      Object.keys(this.mediaListeners).forEach(function (id) {\n        _this2.media.removeEventListener(id, _this2.mediaListeners[id]);\n        _this2.media.addEventListener(id, _this2.mediaListeners[id]);\n      });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n  }, {\n    key: \"createTimer\",\n    value: function createTimer() {\n      var _this3 = this;\n      var onAudioProcess = function onAudioProcess() {\n        if (_this3.isPaused()) {\n          return;\n        }\n        _this3.fireEvent('audioprocess', _this3.getCurrentTime());\n\n        // Call again in the next frame\n        util.frame(onAudioProcess)();\n      };\n      this.on('play', onAudioProcess);\n\n      // Update the progress one more time to prevent it from being stuck in\n      // case of lower framerates\n      this.on('pause', function () {\n        _this3.fireEvent('audioprocess', _this3.getCurrentTime());\n      });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n  }, {\n    key: \"load\",\n    value: function load(url, container, peaks, preload) {\n      var media = document.createElement(this.mediaType);\n      media.controls = this.params.mediaControls;\n      media.autoplay = this.params.autoplay || false;\n      media.preload = preload == null ? 'auto' : preload;\n      media.src = url;\n      media.style.width = '100%';\n      var prevMedia = container.querySelector(this.mediaType);\n      if (prevMedia) {\n        container.removeChild(prevMedia);\n      }\n      container.appendChild(media);\n      this._load(media, peaks, preload);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n  }, {\n    key: \"loadElt\",\n    value: function loadElt(elt, peaks) {\n      elt.controls = this.params.mediaControls;\n      elt.autoplay = this.params.autoplay || false;\n      this._load(elt, peaks, elt.preload);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n  }, {\n    key: \"_load\",\n    value: function _load(media, peaks, preload) {\n      // verify media element is valid\n      if (!(media instanceof HTMLMediaElement) || typeof media.addEventListener === 'undefined') {\n        throw new Error('media parameter is not a valid media element');\n      }\n\n      // load must be called manually on iOS, otherwise peaks won't draw\n      // until a user interaction triggers load --> 'ready' event\n      //\n      // note that we avoid calling media.load here when given peaks and preload == 'none'\n      // as this almost always triggers some browser fetch of the media.\n      if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n        // Resets the media element and restarts the media resource. Any\n        // pending events are discarded. How much media data is fetched is\n        // still affected by the preload attribute.\n        media.load();\n      }\n      this.media = media;\n      this._setupMediaListeners();\n      this.peaks = peaks;\n      this.onPlayEnd = null;\n      this.buffer = null;\n      this.isMuted = media.muted;\n      this.setPlaybackRate(this.playbackRate);\n      this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n  }, {\n    key: \"isPaused\",\n    value: function isPaused() {\n      return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n  }, {\n    key: \"getDuration\",\n    value: function getDuration() {\n      if (this.explicitDuration) {\n        return this.explicitDuration;\n      }\n      var duration = (this.buffer || this.media).duration;\n      if (duration >= Infinity) {\n        // streaming audio\n        duration = this.media.seekable.end(0);\n      }\n      return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n  }, {\n    key: \"getCurrentTime\",\n    value: function getCurrentTime() {\n      return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n  }, {\n    key: \"getPlayedPercents\",\n    value: function getPlayedPercents() {\n      return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n  }, {\n    key: \"getPlaybackRate\",\n    value: function getPlaybackRate() {\n      return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n  }, {\n    key: \"setPlaybackRate\",\n    value: function setPlaybackRate(value) {\n      this.playbackRate = value || 1;\n      this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n  }, {\n    key: \"seekTo\",\n    value: function seekTo(start) {\n      if (start != null && !isNaN(start)) {\n        this.media.currentTime = start;\n      }\n      this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n  }, {\n    key: \"play\",\n    value: function play(start, end) {\n      this.seekTo(start);\n      var promise = this.media.play();\n      end && this.setPlayEnd(end);\n      return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      var promise;\n      if (this.media) {\n        promise = this.media.pause();\n      }\n      this.clearPlayEnd();\n      return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n  }, {\n    key: \"setPlayEnd\",\n    value: function setPlayEnd(end) {\n      var _this4 = this;\n      this.clearPlayEnd();\n      this._onPlayEnd = function (time) {\n        if (time >= end) {\n          _this4.pause();\n          _this4.seekTo(end);\n        }\n      };\n      this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n  }, {\n    key: \"clearPlayEnd\",\n    value: function clearPlayEnd() {\n      if (this._onPlayEnd) {\n        this.un('audioprocess', this._onPlayEnd);\n        this._onPlayEnd = null;\n      }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n  }, {\n    key: \"getPeaks\",\n    value: function getPeaks(length, first, last) {\n      if (this.buffer) {\n        return _get(_getPrototypeOf(MediaElement.prototype), \"getPeaks\", this).call(this, length, first, last);\n      }\n      return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n  }, {\n    key: \"setSinkId\",\n    value: function setSinkId(deviceId) {\n      if (deviceId) {\n        if (!this.media.setSinkId) {\n          return Promise.reject(new Error('setSinkId is not supported in your browser'));\n        }\n        return this.media.setSinkId(deviceId);\n      }\n      return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n  }, {\n    key: \"getVolume\",\n    value: function getVolume() {\n      return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(value) {\n      this.volume = value;\n      // no need to change when it's already at that volume\n      if (this.media.volume !== this.volume) {\n        this.media.volume = this.volume;\n      }\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @since 4.0.0\n     * @param {boolean} muted Specify `true` to mute audio.\n     */\n  }, {\n    key: \"setMute\",\n    value: function setMute(muted) {\n      // This causes a volume change to be emitted too through the\n      // volumechange event listener.\n      this.isMuted = this.media.muted = muted;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this5 = this;\n      this.pause();\n      this.unAll();\n      this.destroyed = true;\n\n      // cleanup media event listeners\n      Object.keys(this.mediaListeners).forEach(function (id) {\n        if (_this5.media) {\n          _this5.media.removeEventListener(id, _this5.mediaListeners[id]);\n        }\n      });\n      if (this.params.removeMediaElementOnDestroy && this.media && this.media.parentNode) {\n        this.media.parentNode.removeChild(this.media);\n      }\n      this.media = null;\n    }\n  }]);\n  return MediaElement;\n}(_webaudio.default);\nexports[\"default\"] = MediaElement;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/peakcache.js\":\n/*!**************************!*\\\n  !*** ./src/peakcache.js ***!\n  \\**************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nvar PeakCache = /*#__PURE__*/function () {\n  /**\n   * Instantiate cache\n   */\n  function PeakCache() {\n    _classCallCheck(this, PeakCache);\n    this.clearPeakCache();\n  }\n\n  /**\n   * Empty the cache\n   */\n  _createClass(PeakCache, [{\n    key: \"clearPeakCache\",\n    value: function clearPeakCache() {\n      /**\n       * Flat array with entries that are always in pairs to mark the\n       * beginning and end of each subrange.  This is a convenience so we can\n       * iterate over the pairs for easy set difference operations.\n       * @private\n       */\n      this.peakCacheRanges = [];\n      /**\n       * Length of the entire cachable region, used for resetting the cache\n       * when this changes (zoom events, for instance).\n       * @private\n       */\n      this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n  }, {\n    key: \"addRangeToPeakCache\",\n    value: function addRangeToPeakCache(length, start, end) {\n      if (length != this.peakCacheLength) {\n        this.clearPeakCache();\n        this.peakCacheLength = length;\n      }\n\n      // Return ranges that weren't in the cache before the call.\n      var uncachedRanges = [];\n      var i = 0;\n      // Skip ranges before the current start.\n      while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] < start) {\n        i++;\n      }\n      // If |i| is even, |start| falls after an existing range.  Otherwise,\n      // |start| falls between an existing range, and the uncached region\n      // starts when we encounter the next node in |peakCacheRanges| or\n      // |end|, whichever comes first.\n      if (i % 2 == 0) {\n        uncachedRanges.push(start);\n      }\n      while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] <= end) {\n        uncachedRanges.push(this.peakCacheRanges[i]);\n        i++;\n      }\n      // If |i| is even, |end| is after all existing ranges.\n      if (i % 2 == 0) {\n        uncachedRanges.push(end);\n      }\n\n      // Filter out the 0-length ranges.\n      uncachedRanges = uncachedRanges.filter(function (item, pos, arr) {\n        if (pos == 0) {\n          return item != arr[pos + 1];\n        } else if (pos == arr.length - 1) {\n          return item != arr[pos - 1];\n        }\n        return item != arr[pos - 1] && item != arr[pos + 1];\n      });\n\n      // Merge the two ranges together, uncachedRanges will either contain\n      // wholly new points, or duplicates of points in peakCacheRanges.  If\n      // duplicates are detected, remove both and extend the range.\n      this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n      this.peakCacheRanges = this.peakCacheRanges.sort(function (a, b) {\n        return a - b;\n      }).filter(function (item, pos, arr) {\n        if (pos == 0) {\n          return item != arr[pos + 1];\n        } else if (pos == arr.length - 1) {\n          return item != arr[pos - 1];\n        }\n        return item != arr[pos - 1] && item != arr[pos + 1];\n      });\n\n      // Push the uncached ranges into an array of arrays for ease of\n      // iteration in the functions that call this.\n      var uncachedRangePairs = [];\n      for (i = 0; i < uncachedRanges.length; i += 2) {\n        uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n      }\n      return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n  }, {\n    key: \"getCacheRanges\",\n    value: function getCacheRanges() {\n      var peakCacheRangePairs = [];\n      var i;\n      for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n        peakCacheRangePairs.push([this.peakCacheRanges[i], this.peakCacheRanges[i + 1]]);\n      }\n      return peakCacheRangePairs;\n    }\n  }]);\n  return PeakCache;\n}();\nexports[\"default\"] = PeakCache;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/absMax.js\":\n/*!****************************!*\\\n  !*** ./src/util/absMax.js ***!\n  \\****************************/\n/***/ ((module, exports, __nested_webpack_require_93879__) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = absMax;\nvar _max = _interopRequireDefault(__nested_webpack_require_93879__(/*! ./max */ \"./src/util/max.js\"));\nvar _min = _interopRequireDefault(__nested_webpack_require_93879__(/*! ./min */ \"./src/util/min.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\r\n * Get the largest absolute value in an array\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n * @since 4.3.0\r\n */\nfunction absMax(values) {\n  var max = (0, _max.default)(values);\n  var min = (0, _min.default)(values);\n  return -min > max ? -min : max;\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/clamp.js\":\n/*!***************************!*\\\n  !*** ./src/util/clamp.js ***!\n  \\***************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = clamp;\n/**\n * Returns a number limited to the given range.\n *\n * @param {number} val The number to be limited to a range\n * @param {number} min The lower boundary of the limit range\n * @param {number} max The upper boundary of the limit range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(min, val), max);\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/fetch.js\":\n/*!***************************!*\\\n  !*** ./src/util/fetch.js ***!\n  \\***************************/\n/***/ ((module, exports, __nested_webpack_require_95556__) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = fetchFile;\nvar _observer = _interopRequireDefault(__nested_webpack_require_95556__(/*! ./observer */ \"./src/util/observer.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar ProgressHandler = /*#__PURE__*/function () {\n  /**\n   * Instantiate ProgressHandler\n   *\n   * @param {Observer} instance The `fetchFile` observer instance.\n   * @param {Number} contentLength Content length.\n   * @param {Response} response Response object.\n   */\n  function ProgressHandler(instance, contentLength, response) {\n    _classCallCheck(this, ProgressHandler);\n    this.instance = instance;\n    this.instance._reader = response.body.getReader();\n    this.total = parseInt(contentLength, 10);\n    this.loaded = 0;\n  }\n\n  /**\n   * A method that is called once, immediately after the `ReadableStream``\n   * is constructed.\n   *\n   * @param {ReadableStreamDefaultController} controller Controller instance\n   *     used to control the stream.\n   */\n  _createClass(ProgressHandler, [{\n    key: \"start\",\n    value: function start(controller) {\n      var _this = this;\n      var read = function read() {\n        // instance._reader.read() returns a promise that resolves\n        // when a value has been received\n        _this.instance._reader.read().then(function (_ref) {\n          var done = _ref.done,\n            value = _ref.value;\n          // result objects contain two properties:\n          // done  - true if the stream has already given you all its data.\n          // value - some data. Always undefined when done is true.\n          if (done) {\n            // ensure onProgress called when content-length=0\n            if (_this.total === 0) {\n              _this.instance.onProgress.call(_this.instance, {\n                loaded: _this.loaded,\n                total: _this.total,\n                lengthComputable: false\n              });\n            }\n            // no more data needs to be consumed, close the stream\n            controller.close();\n            return;\n          }\n          _this.loaded += value.byteLength;\n          _this.instance.onProgress.call(_this.instance, {\n            loaded: _this.loaded,\n            total: _this.total,\n            lengthComputable: !(_this.total === 0)\n          });\n          // enqueue the next data chunk into our target stream\n          controller.enqueue(value);\n          read();\n        }).catch(function (error) {\n          controller.error(error);\n        });\n      };\n      read();\n    }\n  }]);\n  return ProgressHandler;\n}();\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nfunction fetchFile(options) {\n  if (!options) {\n    throw new Error('fetch options missing');\n  } else if (!options.url) {\n    throw new Error('fetch url missing');\n  }\n  var instance = new _observer.default();\n  var fetchHeaders = new Headers();\n  var fetchRequest = new Request(options.url);\n\n  // add ability to abort\n  instance.controller = new AbortController();\n\n  // check if headers have to be added\n  if (options && options.requestHeaders) {\n    // add custom request headers\n    options.requestHeaders.forEach(function (header) {\n      fetchHeaders.append(header.key, header.value);\n    });\n  }\n\n  // parse fetch options\n  var responseType = options.responseType || 'json';\n  var fetchOptions = {\n    method: options.method || 'GET',\n    headers: fetchHeaders,\n    mode: options.mode || 'cors',\n    credentials: options.credentials || 'same-origin',\n    cache: options.cache || 'default',\n    redirect: options.redirect || 'follow',\n    referrer: options.referrer || 'client',\n    signal: instance.controller.signal\n  };\n  fetch(fetchRequest, fetchOptions).then(function (response) {\n    // store response reference\n    instance.response = response;\n    var progressAvailable = true;\n    if (!response.body) {\n      // ReadableStream is not yet supported in this browser\n      // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n      progressAvailable = false;\n    }\n\n    // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n    var contentLength = response.headers.get('content-length');\n    if (contentLength === null) {\n      // Content-Length server response header missing.\n      // Don't evaluate download progress if we can't compare against a total size\n      // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n      progressAvailable = false;\n    }\n    if (!progressAvailable) {\n      // not able to check download progress so skip it\n      return response;\n    }\n\n    // fire progress event when during load\n    instance.onProgress = function (e) {\n      instance.fireEvent('progress', e);\n    };\n    return new Response(new ReadableStream(new ProgressHandler(instance, contentLength, response)), fetchOptions);\n  }).then(function (response) {\n    var errMsg;\n    if (response.ok) {\n      switch (responseType) {\n        case 'arraybuffer':\n          return response.arrayBuffer();\n        case 'json':\n          return response.json();\n        case 'blob':\n          return response.blob();\n        case 'text':\n          return response.text();\n        default:\n          errMsg = 'Unknown responseType: ' + responseType;\n          break;\n      }\n    }\n    if (!errMsg) {\n      errMsg = 'HTTP error status: ' + response.status;\n    }\n    throw new Error(errMsg);\n  }).then(function (response) {\n    instance.fireEvent('success', response);\n  }).catch(function (error) {\n    instance.fireEvent('error', error);\n  });\n\n  // return the fetch request\n  instance.fetchRequest = fetchRequest;\n  return instance;\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/frame.js\":\n/*!***************************!*\\\n  !*** ./src/util/frame.js ***!\n  \\***************************/\n/***/ ((module, exports, __nested_webpack_require_103995__) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = frame;\nvar _requestAnimationFrame = _interopRequireDefault(__nested_webpack_require_103995__(/*! ./request-animation-frame */ \"./src/util/request-animation-frame.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nfunction frame(func) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return (0, _requestAnimationFrame.default)(function () {\n      return func.apply(void 0, args);\n    });\n  };\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/get-id.js\":\n/*!****************************!*\\\n  !*** ./src/util/get-id.js ***!\n  \\****************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = getId;\n/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nfunction getId(prefix) {\n  if (prefix === undefined) {\n    prefix = 'wavesurfer_';\n  }\n  return prefix + Math.random().toString(32).substring(2);\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/index.js\":\n/*!***************************!*\\\n  !*** ./src/util/index.js ***!\n  \\***************************/\n/***/ ((__unused_webpack_module, exports, __nested_webpack_require_105875__) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"Observer\", ({\n  enumerable: true,\n  get: function get() {\n    return _observer.default;\n  }\n}));\nObject.defineProperty(exports, \"absMax\", ({\n  enumerable: true,\n  get: function get() {\n    return _absMax.default;\n  }\n}));\nObject.defineProperty(exports, \"clamp\", ({\n  enumerable: true,\n  get: function get() {\n    return _clamp.default;\n  }\n}));\nObject.defineProperty(exports, \"debounce\", ({\n  enumerable: true,\n  get: function get() {\n    return _debounce.default;\n  }\n}));\nObject.defineProperty(exports, \"fetchFile\", ({\n  enumerable: true,\n  get: function get() {\n    return _fetch.default;\n  }\n}));\nObject.defineProperty(exports, \"frame\", ({\n  enumerable: true,\n  get: function get() {\n    return _frame.default;\n  }\n}));\nObject.defineProperty(exports, \"getId\", ({\n  enumerable: true,\n  get: function get() {\n    return _getId.default;\n  }\n}));\nObject.defineProperty(exports, \"ignoreSilenceMode\", ({\n  enumerable: true,\n  get: function get() {\n    return _silenceMode.default;\n  }\n}));\nObject.defineProperty(exports, \"max\", ({\n  enumerable: true,\n  get: function get() {\n    return _max.default;\n  }\n}));\nObject.defineProperty(exports, \"min\", ({\n  enumerable: true,\n  get: function get() {\n    return _min.default;\n  }\n}));\nObject.defineProperty(exports, \"preventClick\", ({\n  enumerable: true,\n  get: function get() {\n    return _preventClick.default;\n  }\n}));\nObject.defineProperty(exports, \"requestAnimationFrame\", ({\n  enumerable: true,\n  get: function get() {\n    return _requestAnimationFrame.default;\n  }\n}));\nObject.defineProperty(exports, \"style\", ({\n  enumerable: true,\n  get: function get() {\n    return _style.default;\n  }\n}));\nObject.defineProperty(exports, \"withOrientation\", ({\n  enumerable: true,\n  get: function get() {\n    return _orientation.default;\n  }\n}));\nvar _getId = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./get-id */ \"./src/util/get-id.js\"));\nvar _max = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./max */ \"./src/util/max.js\"));\nvar _min = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./min */ \"./src/util/min.js\"));\nvar _absMax = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./absMax */ \"./src/util/absMax.js\"));\nvar _observer = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./observer */ \"./src/util/observer.js\"));\nvar _style = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./style */ \"./src/util/style.js\"));\nvar _requestAnimationFrame = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./request-animation-frame */ \"./src/util/request-animation-frame.js\"));\nvar _frame = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./frame */ \"./src/util/frame.js\"));\nvar _debounce = _interopRequireDefault(__nested_webpack_require_105875__(/*! debounce */ \"./node_modules/debounce/index.js\"));\nvar _preventClick = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./prevent-click */ \"./src/util/prevent-click.js\"));\nvar _fetch = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./fetch */ \"./src/util/fetch.js\"));\nvar _clamp = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./clamp */ \"./src/util/clamp.js\"));\nvar _orientation = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./orientation */ \"./src/util/orientation.js\"));\nvar _silenceMode = _interopRequireDefault(__nested_webpack_require_105875__(/*! ./silence-mode */ \"./src/util/silence-mode.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }),\n\n/***/ \"./src/util/max.js\":\n/*!*************************!*\\\n  !*** ./src/util/max.js ***!\n  \\*************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = max;\n/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nfunction max(values) {\n  var largest = -Infinity;\n  Object.keys(values).forEach(function (i) {\n    if (values[i] > largest) {\n      largest = values[i];\n    }\n  });\n  return largest;\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/min.js\":\n/*!*************************!*\\\n  !*** ./src/util/min.js ***!\n  \\*************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = min;\n/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nfunction min(values) {\n  var smallest = Number(Infinity);\n  Object.keys(values).forEach(function (i) {\n    if (values[i] < smallest) {\n      smallest = values[i];\n    }\n  });\n  return smallest;\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/observer.js\":\n/*!******************************!*\\\n  !*** ./src/util/observer.js ***!\n  \\******************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n/**\n * Observer class\n */\nvar Observer = /*#__PURE__*/function () {\n  /**\n   * Instantiate Observer\n   */\n  function Observer() {\n    _classCallCheck(this, Observer);\n    /**\n     * @private\n     * @todo Initialise the handlers here already and remove the conditional\n     * assignment in `on()`\n     */\n    this._disabledEventEmissions = [];\n    this.handlers = null;\n  }\n  /**\n   * Attach a handler function for an event.\n   *\n   * @param {string} event Name of the event to listen to\n   * @param {function} fn The callback to trigger when the event is fired\n   * @return {ListenerDescriptor} The event descriptor\n   */\n  _createClass(Observer, [{\n    key: \"on\",\n    value: function on(event, fn) {\n      var _this = this;\n      if (!this.handlers) {\n        this.handlers = {};\n      }\n      var handlers = this.handlers[event];\n      if (!handlers) {\n        handlers = this.handlers[event] = [];\n      }\n      handlers.push(fn);\n\n      // Return an event descriptor\n      return {\n        name: event,\n        callback: fn,\n        un: function un(e, fn) {\n          return _this.un(e, fn);\n        }\n      };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n  }, {\n    key: \"un\",\n    value: function un(event, fn) {\n      if (!this.handlers) {\n        return;\n      }\n      var handlers = this.handlers[event];\n      var i;\n      if (handlers) {\n        if (fn) {\n          for (i = handlers.length - 1; i >= 0; i--) {\n            if (handlers[i] == fn) {\n              handlers.splice(i, 1);\n            }\n          }\n        } else {\n          handlers.length = 0;\n        }\n      }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n  }, {\n    key: \"unAll\",\n    value: function unAll() {\n      this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n  }, {\n    key: \"once\",\n    value: function once(event, handler) {\n      var _this2 = this;\n      var fn = function fn() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        /*  eslint-disable no-invalid-this */\n        handler.apply(_this2, args);\n        /*  eslint-enable no-invalid-this */\n        setTimeout(function () {\n          _this2.un(event, fn);\n        }, 0);\n      };\n      return this.on(event, fn);\n    }\n\n    /**\n     * Disable firing a list of events by name. When specified, event handlers for any event type\n     * passed in here will not be called.\n     *\n     * @since 4.0.0\n     * @param {string[]} eventNames an array of event names to disable emissions for\n     * @example\n     * // disable seek and interaction events\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n     */\n  }, {\n    key: \"setDisabledEventEmissions\",\n    value: function setDisabledEventEmissions(eventNames) {\n      this._disabledEventEmissions = eventNames;\n    }\n\n    /**\n     * plugins borrow part of this class without calling the constructor,\n     * so we have to be careful about _disabledEventEmissions\n     */\n  }, {\n    key: \"_isDisabledEventEmission\",\n    value: function _isDisabledEventEmission(event) {\n      return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n  }, {\n    key: \"fireEvent\",\n    value: function fireEvent(event) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      if (!this.handlers || this._isDisabledEventEmission(event)) {\n        return;\n      }\n      var handlers = this.handlers[event];\n      handlers && handlers.forEach(function (fn) {\n        fn.apply(void 0, args);\n      });\n    }\n  }]);\n  return Observer;\n}();\nexports[\"default\"] = Observer;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/orientation.js\":\n/*!*********************************!*\\\n  !*** ./src/util/orientation.js ***!\n  \\*********************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = withOrientation;\nvar verticalPropMap = {\n  width: 'height',\n  height: 'width',\n  overflowX: 'overflowY',\n  overflowY: 'overflowX',\n  clientWidth: 'clientHeight',\n  clientHeight: 'clientWidth',\n  clientX: 'clientY',\n  clientY: 'clientX',\n  scrollWidth: 'scrollHeight',\n  scrollLeft: 'scrollTop',\n  offsetLeft: 'offsetTop',\n  offsetTop: 'offsetLeft',\n  offsetHeight: 'offsetWidth',\n  offsetWidth: 'offsetHeight',\n  left: 'top',\n  right: 'bottom',\n  top: 'left',\n  bottom: 'right',\n  borderRightStyle: 'borderBottomStyle',\n  borderRightWidth: 'borderBottomWidth',\n  borderRightColor: 'borderBottomColor'\n};\n\n/**\n * Convert a horizontally-oriented property name to a vertical one.\n *\n * @param {string} prop A property name\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {string} prop, converted appropriately\n */\nfunction mapProp(prop, vertical) {\n  if (Object.prototype.hasOwnProperty.call(verticalPropMap, prop)) {\n    return vertical ? verticalPropMap[prop] : prop;\n  } else {\n    return prop;\n  }\n}\nvar isProxy = Symbol(\"isProxy\");\n\n/**\n * Returns an appropriately oriented object based on vertical.\n * If vertical is true, attribute getting and setting will be mapped through\n * verticalPropMap, so that e.g. getting the object's .width will give its\n * .height instead.\n * Certain methods of an oriented object will return oriented objects as well.\n * Oriented objects can't be added to the DOM directly since they are Proxy objects\n * and thus fail typechecks. Use domElement to get the actual element for this.\n *\n * @param {object} target The object to be wrapped and oriented\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {Proxy} An oriented object with attr translation via verticalAttrMap\n * @since 5.0.0\n */\nfunction withOrientation(target, vertical) {\n  if (target[isProxy]) {\n    return target;\n  } else {\n    return new Proxy(target, {\n      get: function get(obj, prop, receiver) {\n        if (prop === isProxy) {\n          return true;\n        } else if (prop === 'domElement') {\n          return obj;\n        } else if (prop === 'style') {\n          return withOrientation(obj.style, vertical);\n        } else if (prop === 'canvas') {\n          return withOrientation(obj.canvas, vertical);\n        } else if (prop === 'getBoundingClientRect') {\n          return function () {\n            return withOrientation(obj.getBoundingClientRect.apply(obj, arguments), vertical);\n          };\n        } else if (prop === 'getContext') {\n          return function () {\n            return withOrientation(obj.getContext.apply(obj, arguments), vertical);\n          };\n        } else {\n          var value = obj[mapProp(prop, vertical)];\n          return typeof value == 'function' ? value.bind(obj) : value;\n        }\n      },\n      set: function set(obj, prop, value) {\n        obj[mapProp(prop, vertical)] = value;\n        return true;\n      }\n    });\n  }\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/prevent-click.js\":\n/*!***********************************!*\\\n  !*** ./src/util/prevent-click.js ***!\n  \\***********************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = preventClick;\n/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n  event.stopPropagation();\n  document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nfunction preventClick(values) {\n  document.body.addEventListener('click', preventClickHandler, true);\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/request-animation-frame.js\":\n/*!*********************************************!*\\\n  !*** ./src/util/request-animation-frame.js ***!\n  \\*********************************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nvar _default = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback, element) {\n  return setTimeout(callback, 1000 / 60);\n}).bind(window);\nexports[\"default\"] = _default;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/silence-mode.js\":\n/*!**********************************!*\\\n  !*** ./src/util/silence-mode.js ***!\n  \\**********************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = ignoreSilenceMode;\n/**\n * Ignores device silence mode when using the `WebAudio` backend.\n *\n * Many mobile devices contain a hardware button to mute the ringtone for incoming\n * calls and messages. Unfortunately, on some platforms like iOS, this also mutes\n * wavesurfer's audio when using the `WebAudio` backend. This function creates a\n * temporary `<audio>` element that makes sure the WebAudio backend keeps playing\n * when muting the device ringer.\n *\n * @since 5.2.0\n */\nfunction ignoreSilenceMode() {\n  // Set webaudio context with 1 second silent audio 44100 bit rate buffer to allow playing audio even if silent switch is on the device\n  var silentAC = new AudioContext();\n  var silentBS = silentAC.createBufferSource();\n  silentBS.buffer = silentAC.createBuffer(1, 1, 44100);\n  silentBS.connect(silentAC.destination);\n  silentBS.start();\n\n  // Set the src to a short bit of url encoded as a silent mp3\n  // NOTE The silence MP3 must be high quality, when web audio sounds are played\n  // in parallel the web audio sound is mixed to match the bitrate of the html sound\n  // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\n  var audioData = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\";\n\n  // disable iOS Airplay (setting the attribute in js doesn't work)\n  var tmp = document.createElement(\"div\");\n  tmp.innerHTML = '<audio x-webkit-airplay=\"deny\"></audio>';\n  var audioSilentMode = tmp.children.item(0);\n  audioSilentMode.src = audioData;\n  audioSilentMode.preload = \"auto\";\n  audioSilentMode.type = \"audio/mpeg\";\n  audioSilentMode.disableRemotePlayback = true;\n\n  // play\n  audioSilentMode.play();\n\n  // cleanup\n  audioSilentMode.remove();\n  tmp.remove();\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/util/style.js\":\n/*!***************************!*\\\n  !*** ./src/util/style.js ***!\n  \\***************************/\n/***/ ((module, exports) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = style;\n/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nfunction style(el, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    if (el.style[prop] !== styles[prop]) {\n      el.style[prop] = styles[prop];\n    }\n  });\n  return el;\n}\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/wavesurfer.js\":\n/*!***************************!*\\\n  !*** ./src/wavesurfer.js ***!\n  \\***************************/\n/***/ ((module, exports, __nested_webpack_require_126018__) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar util = _interopRequireWildcard(__nested_webpack_require_126018__(/*! ./util */ \"./src/util/index.js\"));\nvar _drawer = _interopRequireDefault(__nested_webpack_require_126018__(/*! ./drawer.multicanvas */ \"./src/drawer.multicanvas.js\"));\nvar _webaudio = _interopRequireDefault(__nested_webpack_require_126018__(/*! ./webaudio */ \"./src/webaudio.js\"));\nvar _mediaelement = _interopRequireDefault(__nested_webpack_require_126018__(/*! ./mediaelement */ \"./src/mediaelement.js\"));\nvar _peakcache = _interopRequireDefault(__nested_webpack_require_126018__(/*! ./peakcache */ \"./src/peakcache.js\"));\nvar _mediaelementWebaudio = _interopRequireDefault(__nested_webpack_require_126018__(/*! ./mediaelement-webaudio */ \"./src/mediaelement-webaudio.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} hideCursor=false Whether to hide the mouse cursor\n * when one would normally be shown by default.\n * @property {boolean} ignoreSilenceMode=false If true, ignores device silence mode\n * when using the `WebAudio` backend.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\n * @property {boolean} vertical=false Render the waveform vertically instead of horizontally.\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n/**\n * @typedef {Object} SplitChannelOptions\n * @desc parameters applied when splitChannels option is true\n * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\n * @property {object} channelColors={} object describing color for each channel. Example:\n * {\n *     0: {\n *         progressColor: 'green',\n *         waveColor: 'pink'\n *     },\n *     1: {\n *         progressColor: 'orange',\n *         waveColor: 'purple'\n *     }\n * }\n * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\n * @property {boolean} relativeNormalization=false determines whether\n * normalization is done per channel or maintains proportionality between\n * channels. Only applied when normalize and splitChannels are both true.\n * @property {boolean} splitDragSelection=false determines if drag selection in regions\n * plugin works separately on each channel or only one selection for all channels\n * @since 4.3.0\n */\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nvar PluginClass = /*#__PURE__*/function () {\n  /**\n   * Construct the plugin\n   *\n   * @param {Object} params={} The plugin params (specific to the plugin)\n   * @param {Object} ws The wavesurfer instance\n   */\n  function PluginClass(params, ws) {\n    _classCallCheck(this, PluginClass);\n  }\n  /**\n   * Initialise the plugin\n   *\n   * Start doing something. This is called by\n   * `wavesurfer.initPlugin(pluginName)`\n   */\n  _createClass(PluginClass, [{\n    key: \"create\",\n    value:\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    function create(params) {}\n  }, {\n    key: \"init\",\n    value: function init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {}\n  }]);\n  return PluginClass;\n}();\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nvar WaveSurfer = /*#__PURE__*/function (_util$Observer) {\n  _inherits(WaveSurfer, _util$Observer);\n  var _super = _createSuper(WaveSurfer);\n  /**\n   * Initialise wavesurfer instance\n   *\n   * @param {WavesurferParams} params Instantiation options for wavesurfer\n   * @example\n   * const wavesurfer = new WaveSurfer(params);\n   * @returns {this} Wavesurfer instance\n   */\n  function WaveSurfer(params) {\n    var _this;\n    _classCallCheck(this, WaveSurfer);\n    _this = _super.call(this);\n    /**\n     * Extract relevant parameters (or defaults)\n     * @private\n     */\n    /** @private */\n    _defineProperty(_assertThisInitialized(_this), \"defaultParams\", {\n      audioContext: null,\n      audioScriptProcessor: null,\n      audioRate: 1,\n      autoCenter: true,\n      autoCenterRate: 5,\n      autoCenterImmediately: false,\n      backend: 'WebAudio',\n      backgroundColor: null,\n      barHeight: 1,\n      barRadius: 0,\n      barGap: null,\n      barMinHeight: null,\n      container: null,\n      cursorColor: '#333',\n      cursorWidth: 1,\n      dragSelection: true,\n      drawingContextAttributes: {\n        // Boolean that hints the user agent to reduce the latency\n        // by desynchronizing the canvas paint cycle from the event\n        // loop\n        desynchronized: false\n      },\n      duration: null,\n      fillParent: true,\n      forceDecode: false,\n      height: 128,\n      hideScrollbar: false,\n      hideCursor: false,\n      ignoreSilenceMode: false,\n      interact: true,\n      loopSelection: true,\n      maxCanvasWidth: 4000,\n      mediaContainer: null,\n      mediaControls: false,\n      mediaType: 'audio',\n      minPxPerSec: 20,\n      normalize: false,\n      partialRender: false,\n      pixelRatio: window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n      plugins: [],\n      progressColor: '#555',\n      removeMediaElementOnDestroy: true,\n      renderer: _drawer.default,\n      responsive: false,\n      rtl: false,\n      scrollParent: false,\n      skipLength: 2,\n      splitChannels: false,\n      splitChannelsOptions: {\n        overlay: false,\n        channelColors: {},\n        filterChannels: [],\n        relativeNormalization: false,\n        splitDragSelection: false\n      },\n      vertical: false,\n      waveColor: '#999',\n      xhr: {}\n    });\n    /** @private */\n    _defineProperty(_assertThisInitialized(_this), \"backends\", {\n      MediaElement: _mediaelement.default,\n      WebAudio: _webaudio.default,\n      MediaElementWebAudio: _mediaelementWebaudio.default\n    });\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    _defineProperty(_assertThisInitialized(_this), \"util\", util);\n    _this.params = Object.assign({}, _this.defaultParams, params);\n    _this.params.splitChannelsOptions = Object.assign({}, _this.defaultParams.splitChannelsOptions, params.splitChannelsOptions);\n    /** @private */\n    _this.container = 'string' == typeof params.container ? document.querySelector(_this.params.container) : _this.params.container;\n    if (!_this.container) {\n      throw new Error('Container element not found');\n    }\n    if (_this.params.mediaContainer == null) {\n      /** @private */\n      _this.mediaContainer = _this.container;\n    } else if (typeof _this.params.mediaContainer == 'string') {\n      /** @private */\n      _this.mediaContainer = document.querySelector(_this.params.mediaContainer);\n    } else {\n      /** @private */\n      _this.mediaContainer = _this.params.mediaContainer;\n    }\n    if (!_this.mediaContainer) {\n      throw new Error('Media Container element not found');\n    }\n    if (_this.params.maxCanvasWidth <= 1) {\n      throw new Error('maxCanvasWidth must be greater than 1');\n    } else if (_this.params.maxCanvasWidth % 2 == 1) {\n      throw new Error('maxCanvasWidth must be an even number');\n    }\n    if (_this.params.rtl === true) {\n      if (_this.params.vertical === true) {\n        util.style(_this.container, {\n          transform: 'rotateX(180deg)'\n        });\n      } else {\n        util.style(_this.container, {\n          transform: 'rotateY(180deg)'\n        });\n      }\n    }\n    if (_this.params.backgroundColor) {\n      _this.setBackgroundColor(_this.params.backgroundColor);\n    }\n\n    /**\n     * @private Used to save the current volume when muting so we can\n     * restore once unmuted\n     * @type {number}\n     */\n    _this.savedVolume = 0;\n\n    /**\n     * @private The current muted state\n     * @type {boolean}\n     */\n    _this.isMuted = false;\n\n    /**\n     * @private Will hold a list of event descriptors that need to be\n     * canceled on subsequent loads of audio\n     * @type {Object[]}\n     */\n    _this.tmpEvents = [];\n\n    /**\n     * @private Holds any running audio downloads\n     * @type {Observer}\n     */\n    _this.currentRequest = null;\n    /** @private */\n    _this.arraybuffer = null;\n    /** @private */\n    _this.drawer = null;\n    /** @private */\n    _this.backend = null;\n    /** @private */\n    _this.peakCache = null;\n\n    // cache constructor objects\n    if (typeof _this.params.renderer !== 'function') {\n      throw new Error('Renderer parameter is invalid');\n    }\n    /**\n     * @private The uninitialised Drawer class\n     */\n    _this.Drawer = _this.params.renderer;\n    /**\n     * @private The uninitialised Backend class\n     */\n    // Back compat\n    if (_this.params.backend == 'AudioElement') {\n      _this.params.backend = 'MediaElement';\n    }\n    if ((_this.params.backend == 'WebAudio' || _this.params.backend === 'MediaElementWebAudio') && !_webaudio.default.prototype.supportsWebAudio.call(null)) {\n      _this.params.backend = 'MediaElement';\n    }\n    _this.Backend = _this.backends[_this.params.backend];\n\n    /**\n     * @private map of plugin names that are currently initialised\n     */\n    _this.initialisedPluginList = {};\n    /** @private */\n    _this.isDestroyed = false;\n\n    /**\n     * Get the current ready status.\n     *\n     * @example const isReady = wavesurfer.isReady;\n     * @return {boolean}\n     */\n    _this.isReady = false;\n\n    // responsive debounced event listener. If this.params.responsive is not\n    // set, this is never called. Use 100ms or this.params.responsive as\n    // timeout for the debounce function.\n    var prevWidth = 0;\n    _this._onResize = util.debounce(function () {\n      if (_this.drawer.wrapper && prevWidth != _this.drawer.wrapper.clientWidth && !_this.params.scrollParent) {\n        prevWidth = _this.drawer.wrapper.clientWidth;\n        if (prevWidth) {\n          // redraw only if waveform container is rendered and has a width\n          _this.drawer.fireEvent('redraw');\n        }\n      }\n    }, typeof _this.params.responsive === 'number' ? _this.params.responsive : 100);\n    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));\n  }\n\n  /**\n   * Initialise the wave\n   *\n   * @example\n   * var wavesurfer = new WaveSurfer(params);\n   * wavesurfer.init();\n   * @return {this} The wavesurfer instance\n   */\n  _createClass(WaveSurfer, [{\n    key: \"init\",\n    value: function init() {\n      this.registerPlugins(this.params.plugins);\n      this.createDrawer();\n      this.createBackend();\n      this.createPeakCache();\n      return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n  }, {\n    key: \"registerPlugins\",\n    value: function registerPlugins(plugins) {\n      var _this2 = this;\n      // first instantiate all the plugins\n      plugins.forEach(function (plugin) {\n        return _this2.addPlugin(plugin);\n      });\n\n      // now run the init functions\n      plugins.forEach(function (plugin) {\n        // call init function of the plugin if deferInit is falsey\n        // in that case you would manually use initPlugins()\n        if (!plugin.deferInit) {\n          _this2.initPlugin(plugin.name);\n        }\n      });\n      this.fireEvent('plugins-registered', plugins);\n      return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n  }, {\n    key: \"getActivePlugins\",\n    value: function getActivePlugins() {\n      return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n  }, {\n    key: \"addPlugin\",\n    value: function addPlugin(plugin) {\n      var _this3 = this;\n      if (!plugin.name) {\n        throw new Error('Plugin does not have a name!');\n      }\n      if (!plugin.instance) {\n        throw new Error(\"Plugin \".concat(plugin.name, \" does not have an instance property!\"));\n      }\n\n      // staticProps properties are applied to wavesurfer instance\n      if (plugin.staticProps) {\n        Object.keys(plugin.staticProps).forEach(function (pluginStaticProp) {\n          /**\n           * Properties defined in a plugin definition's `staticProps` property are added as\n           * staticProps properties of the WaveSurfer instance\n           */\n          _this3[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n        });\n      }\n      var Instance = plugin.instance;\n\n      // turn the plugin instance into an observer\n      var observerPrototypeKeys = Object.getOwnPropertyNames(util.Observer.prototype);\n      observerPrototypeKeys.forEach(function (key) {\n        Instance.prototype[key] = util.Observer.prototype[key];\n      });\n\n      /**\n       * Instantiated plugin classes are added as a property of the wavesurfer\n       * instance\n       * @type {Object}\n       */\n      this[plugin.name] = new Instance(plugin.params || {}, this);\n      this.fireEvent('plugin-added', plugin.name);\n      return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n  }, {\n    key: \"initPlugin\",\n    value: function initPlugin(name) {\n      if (!this[name]) {\n        throw new Error(\"Plugin \".concat(name, \" has not been added yet!\"));\n      }\n      if (this.initialisedPluginList[name]) {\n        // destroy any already initialised plugins\n        this.destroyPlugin(name);\n      }\n      this[name].init();\n      this.initialisedPluginList[name] = true;\n      this.fireEvent('plugin-initialised', name);\n      return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n  }, {\n    key: \"destroyPlugin\",\n    value: function destroyPlugin(name) {\n      if (!this[name]) {\n        throw new Error(\"Plugin \".concat(name, \" has not been added yet and cannot be destroyed!\"));\n      }\n      if (!this.initialisedPluginList[name]) {\n        throw new Error(\"Plugin \".concat(name, \" is not active and cannot be destroyed!\"));\n      }\n      if (typeof this[name].destroy !== 'function') {\n        throw new Error(\"Plugin \".concat(name, \" does not have a destroy function!\"));\n      }\n      this[name].destroy();\n      delete this.initialisedPluginList[name];\n      this.fireEvent('plugin-destroyed', name);\n      return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n  }, {\n    key: \"destroyAllPlugins\",\n    value: function destroyAllPlugins() {\n      var _this4 = this;\n      Object.keys(this.initialisedPluginList).forEach(function (name) {\n        return _this4.destroyPlugin(name);\n      });\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n  }, {\n    key: \"createDrawer\",\n    value: function createDrawer() {\n      var _this5 = this;\n      this.drawer = new this.Drawer(this.container, this.params);\n      this.drawer.init();\n      this.fireEvent('drawer-created', this.drawer);\n      if (this.params.responsive !== false) {\n        window.addEventListener('resize', this._onResize, true);\n        window.addEventListener('orientationchange', this._onResize, true);\n      }\n      this.drawer.on('redraw', function () {\n        _this5.drawBuffer();\n        _this5.drawer.progress(_this5.backend.getPlayedPercents());\n      });\n\n      // Click-to-seek\n      this.drawer.on('click', function (e, progress) {\n        setTimeout(function () {\n          return _this5.seekTo(progress);\n        }, 0);\n      });\n\n      // Relay the scroll event from the drawer\n      this.drawer.on('scroll', function (e) {\n        if (_this5.params.partialRender) {\n          _this5.drawBuffer();\n        }\n        _this5.fireEvent('scroll', e);\n      });\n\n      // Relay the dblclick event from the drawer\n      this.drawer.on('dblclick', function (e, progress) {\n        _this5.fireEvent('dblclick', e, progress);\n      });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n  }, {\n    key: \"createBackend\",\n    value: function createBackend() {\n      var _this6 = this;\n      if (this.backend) {\n        this.backend.destroy();\n      }\n      this.backend = new this.Backend(this.params);\n      this.backend.init();\n      this.fireEvent('backend-created', this.backend);\n      this.backend.on('finish', function () {\n        _this6.drawer.progress(_this6.backend.getPlayedPercents());\n        _this6.fireEvent('finish');\n      });\n      this.backend.on('play', function () {\n        return _this6.fireEvent('play');\n      });\n      this.backend.on('pause', function () {\n        return _this6.fireEvent('pause');\n      });\n      this.backend.on('audioprocess', function (time) {\n        _this6.drawer.progress(_this6.backend.getPlayedPercents());\n        _this6.fireEvent('audioprocess', time);\n      });\n\n      // only needed for MediaElement and MediaElementWebAudio backend\n      if (this.params.backend === 'MediaElement' || this.params.backend === 'MediaElementWebAudio') {\n        this.backend.on('seek', function () {\n          _this6.drawer.progress(_this6.backend.getPlayedPercents());\n        });\n        this.backend.on('volume', function () {\n          var newVolume = _this6.getVolume();\n          _this6.fireEvent('volume', newVolume);\n          if (_this6.backend.isMuted !== _this6.isMuted) {\n            _this6.isMuted = _this6.backend.isMuted;\n            _this6.fireEvent('mute', _this6.isMuted);\n          }\n        });\n      }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n  }, {\n    key: \"createPeakCache\",\n    value: function createPeakCache() {\n      if (this.params.partialRender) {\n        this.peakCache = new _peakcache.default();\n      }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n  }, {\n    key: \"getDuration\",\n    value: function getDuration() {\n      return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n  }, {\n    key: \"getCurrentTime\",\n    value: function getCurrentTime() {\n      return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n  }, {\n    key: \"setCurrentTime\",\n    value: function setCurrentTime(seconds) {\n      if (seconds >= this.getDuration()) {\n        this.seekTo(1);\n      } else {\n        this.seekTo(seconds / this.getDuration());\n      }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n  }, {\n    key: \"play\",\n    value: function play(start, end) {\n      var _this7 = this;\n      if (this.params.ignoreSilenceMode) {\n        // ignores device hardware silence mode\n        util.ignoreSilenceMode();\n      }\n      this.fireEvent('interaction', function () {\n        return _this7.play(start, end);\n      });\n      return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n  }, {\n    key: \"setPlayEnd\",\n    value: function setPlayEnd(position) {\n      this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!this.backend.isPaused()) {\n        return this.backend.pause();\n      }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n  }, {\n    key: \"playPause\",\n    value: function playPause() {\n      return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n  }, {\n    key: \"isPlaying\",\n    value: function isPlaying() {\n      return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n  }, {\n    key: \"skipBackward\",\n    value: function skipBackward(seconds) {\n      this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n  }, {\n    key: \"skipForward\",\n    value: function skipForward(seconds) {\n      this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n  }, {\n    key: \"skip\",\n    value: function skip(offset) {\n      var duration = this.getDuration() || 1;\n      var position = this.getCurrentTime() || 0;\n      position = Math.max(0, Math.min(duration, position + (offset || 0)));\n      this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n  }, {\n    key: \"seekAndCenter\",\n    value: function seekAndCenter(progress) {\n      this.seekTo(progress);\n      this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n  }, {\n    key: \"seekTo\",\n    value: function seekTo(progress) {\n      var _this8 = this;\n      // return an error if progress is not a number between 0 and 1\n      if (typeof progress !== 'number' || !isFinite(progress) || progress < 0 || progress > 1) {\n        throw new Error('Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!');\n      }\n      this.fireEvent('interaction', function () {\n        return _this8.seekTo(progress);\n      });\n      var isWebAudioBackend = this.params.backend === 'WebAudio';\n      var paused = this.backend.isPaused();\n      if (isWebAudioBackend && !paused) {\n        this.backend.pause();\n      }\n\n      // avoid small scrolls while paused seeking\n      var oldScrollParent = this.params.scrollParent;\n      this.params.scrollParent = false;\n      this.backend.seekTo(progress * this.getDuration());\n      this.drawer.progress(progress);\n      if (isWebAudioBackend && !paused) {\n        this.backend.play();\n      }\n      this.params.scrollParent = oldScrollParent;\n      this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.pause();\n      this.seekTo(0);\n      this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n  }, {\n    key: \"setSinkId\",\n    value: function setSinkId(deviceId) {\n      return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(newVolume) {\n      if (this.isMuted === true) {\n        this.savedVolume = newVolume;\n        return;\n      }\n      this.backend.setVolume(newVolume);\n      this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n  }, {\n    key: \"getVolume\",\n    value: function getVolume() {\n      return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n  }, {\n    key: \"setPlaybackRate\",\n    value: function setPlaybackRate(rate) {\n      this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n  }, {\n    key: \"getPlaybackRate\",\n    value: function getPlaybackRate() {\n      return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n  }, {\n    key: \"toggleMute\",\n    value: function toggleMute() {\n      this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n  }, {\n    key: \"setMute\",\n    value: function setMute(mute) {\n      // ignore all muting requests if the audio is already in that state\n      if (mute === this.isMuted) {\n        this.fireEvent('mute', this.isMuted);\n        return;\n      }\n      if (this.backend.setMute) {\n        // Backends such as the MediaElement backend have their own handling\n        // of mute, let them handle it.\n        this.backend.setMute(mute);\n        this.isMuted = mute;\n      } else {\n        if (mute) {\n          // If currently not muted then save current volume,\n          // turn off the volume and update the mute properties\n          this.savedVolume = this.backend.getVolume();\n          this.backend.setVolume(0);\n          this.isMuted = true;\n          this.fireEvent('volume', 0);\n        } else {\n          // If currently muted then restore to the saved volume\n          // and update the mute properties\n          this.backend.setVolume(this.savedVolume);\n          this.isMuted = false;\n          this.fireEvent('volume', this.savedVolume);\n        }\n      }\n      this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n  }, {\n    key: \"getMute\",\n    value: function getMute() {\n      return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n  }, {\n    key: \"getFilters\",\n    value: function getFilters() {\n      return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n  }, {\n    key: \"toggleScroll\",\n    value: function toggleScroll() {\n      this.params.scrollParent = !this.params.scrollParent;\n      this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n  }, {\n    key: \"toggleInteraction\",\n    value: function toggleInteraction() {\n      this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its wave color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n  }, {\n    key: \"getWaveColor\",\n    value: function getWaveColor() {\n      var channelIdx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n        return this.params.splitChannelsOptions.channelColors[channelIdx].waveColor;\n      }\n      return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its wave color if splitChannels is true\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n  }, {\n    key: \"setWaveColor\",\n    value: function setWaveColor(color) {\n      var channelIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n        this.params.splitChannelsOptions.channelColors[channelIdx].waveColor = color;\n      } else {\n        this.params.waveColor = color;\n      }\n      this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its progress color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n  }, {\n    key: \"getProgressColor\",\n    value: function getProgressColor() {\n      var channelIdx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n        return this.params.splitChannelsOptions.channelColors[channelIdx].progressColor;\n      }\n      return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its progress color if splitChannels is true\n     * @example wavesurfer.setProgressColor('#400');\n     */\n  }, {\n    key: \"setProgressColor\",\n    value: function setProgressColor(color, channelIdx) {\n      if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n        this.params.splitChannelsOptions.channelColors[channelIdx].progressColor = color;\n      } else {\n        this.params.progressColor = color;\n      }\n      this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n  }, {\n    key: \"getBackgroundColor\",\n    value: function getBackgroundColor() {\n      return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n  }, {\n    key: \"setBackgroundColor\",\n    value: function setBackgroundColor(color) {\n      this.params.backgroundColor = color;\n      util.style(this.container, {\n        background: this.params.backgroundColor\n      });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n  }, {\n    key: \"getCursorColor\",\n    value: function getCursorColor() {\n      return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n  }, {\n    key: \"setCursorColor\",\n    value: function setCursorColor(color) {\n      this.params.cursorColor = color;\n      this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(height) {\n      this.params.height = height;\n      this.drawer.setHeight(height * this.params.pixelRatio);\n      this.drawBuffer();\n    }\n\n    /**\n     * Hide channels from being drawn on the waveform if splitting channels.\n     *\n     * For example, if we want to draw only the peaks for the right stereo channel:\n     *\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n     * wavesurfer.load('stereo_audio.mp3');\n     *\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n     *\n     * @param {array} channelIndices Channels to be filtered out from drawing.\n     * @version 4.0.0\n     */\n  }, {\n    key: \"setFilteredChannels\",\n    value: function setFilteredChannels(channelIndices) {\n      this.params.splitChannelsOptions.filterChannels = channelIndices;\n      this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n  }, {\n    key: \"drawBuffer\",\n    value: function drawBuffer() {\n      var nominalWidth = Math.round(this.getDuration() * this.params.minPxPerSec * this.params.pixelRatio);\n      var parentWidth = this.drawer.getWidth();\n      var width = nominalWidth;\n      // always start at 0 after zooming for scrolling : issue redraw left part\n      var start = 0;\n      var end = Math.max(start + parentWidth, width);\n      // Fill container\n      if (this.params.fillParent && (!this.params.scrollParent || nominalWidth < parentWidth)) {\n        width = parentWidth;\n        start = 0;\n        end = width;\n      }\n      var peaks;\n      if (this.params.partialRender) {\n        var newRanges = this.peakCache.addRangeToPeakCache(width, start, end);\n        var i;\n        for (i = 0; i < newRanges.length; i++) {\n          peaks = this.backend.getPeaks(width, newRanges[i][0], newRanges[i][1]);\n          this.drawer.drawPeaks(peaks, width, newRanges[i][0], newRanges[i][1]);\n        }\n      } else {\n        peaks = this.backend.getPeaks(width, start, end);\n        this.drawer.drawPeaks(peaks, width, start, end);\n      }\n      this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n  }, {\n    key: \"zoom\",\n    value: function zoom(pxPerSec) {\n      if (!pxPerSec) {\n        this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n        this.params.scrollParent = false;\n      } else {\n        this.params.minPxPerSec = pxPerSec;\n        this.params.scrollParent = true;\n      }\n      this.drawBuffer();\n      this.drawer.progress(this.backend.getPlayedPercents());\n      this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n      this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n  }, {\n    key: \"loadArrayBuffer\",\n    value: function loadArrayBuffer(arraybuffer) {\n      var _this9 = this;\n      this.decodeArrayBuffer(arraybuffer, function (data) {\n        if (!_this9.isDestroyed) {\n          _this9.loadDecodedBuffer(data);\n        }\n      });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n  }, {\n    key: \"loadDecodedBuffer\",\n    value: function loadDecodedBuffer(buffer) {\n      this.backend.load(buffer);\n      this.drawBuffer();\n      this.isReady = true;\n      this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n  }, {\n    key: \"loadBlob\",\n    value: function loadBlob(blob) {\n      var _this10 = this;\n      // Create file reader\n      var reader = new FileReader();\n      reader.addEventListener('progress', function (e) {\n        return _this10.onProgress(e);\n      });\n      reader.addEventListener('load', function (e) {\n        return _this10.loadArrayBuffer(e.target.result);\n      });\n      reader.addEventListener('error', function () {\n        return _this10.fireEvent('error', 'Error reading file');\n      });\n      reader.readAsArrayBuffer(blob);\n      this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n  }, {\n    key: \"load\",\n    value: function load(url, peaks, preload, duration) {\n      if (!url) {\n        throw new Error('url parameter cannot be empty');\n      }\n      this.empty();\n      if (preload) {\n        // check whether the preload attribute will be usable and if not log\n        // a warning listing the reasons why not and nullify the variable\n        var preloadIgnoreReasons = {\n          \"Preload is not 'auto', 'none' or 'metadata'\": ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n          'Peaks are not provided': !peaks,\n          \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\": ['MediaElement', 'MediaElementWebAudio'].indexOf(this.params.backend) === -1,\n          'Url is not of type string': typeof url !== 'string'\n        };\n        var activeReasons = Object.keys(preloadIgnoreReasons).filter(function (reason) {\n          return preloadIgnoreReasons[reason];\n        });\n        if (activeReasons.length) {\n          // eslint-disable-next-line no-console\n          console.warn('Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' + activeReasons.join('\\n\\t- '));\n          // stop invalid values from being used\n          preload = null;\n        }\n      }\n\n      // loadBuffer(url, peaks, duration) requires that url is a string\n      // but users can pass in a HTMLMediaElement to WaveSurfer\n      if (this.params.backend === 'WebAudio' && url instanceof HTMLMediaElement) {\n        url = url.src;\n      }\n      switch (this.params.backend) {\n        case 'WebAudio':\n          return this.loadBuffer(url, peaks, duration);\n        case 'MediaElement':\n        case 'MediaElementWebAudio':\n          return this.loadMediaElement(url, peaks, preload, duration);\n      }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n  }, {\n    key: \"loadBuffer\",\n    value: function loadBuffer(url, peaks, duration) {\n      var _this11 = this;\n      var load = function load(action) {\n        if (action) {\n          _this11.tmpEvents.push(_this11.once('ready', action));\n        }\n        return _this11.getArrayBuffer(url, function (data) {\n          return _this11.loadArrayBuffer(data);\n        });\n      };\n      if (peaks) {\n        this.backend.setPeaks(peaks, duration);\n        this.drawBuffer();\n        this.fireEvent('waveform-ready');\n        this.tmpEvents.push(this.once('interaction', load));\n      } else {\n        return load();\n      }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n  }, {\n    key: \"loadMediaElement\",\n    value: function loadMediaElement(urlOrElt, peaks, preload, duration) {\n      var _this12 = this;\n      var url = urlOrElt;\n      if (typeof urlOrElt === 'string') {\n        this.backend.load(url, this.mediaContainer, peaks, preload);\n      } else {\n        var elt = urlOrElt;\n        this.backend.loadElt(elt, peaks);\n\n        // If peaks are not provided,\n        // url = element.src so we can get peaks with web audio\n        url = elt.src;\n      }\n      this.tmpEvents.push(this.backend.once('canplay', function () {\n        // ignore when backend was already destroyed\n        if (!_this12.backend.destroyed) {\n          _this12.drawBuffer();\n          _this12.isReady = true;\n          _this12.fireEvent('ready');\n        }\n      }), this.backend.once('error', function (err) {\n        return _this12.fireEvent('error', err);\n      }));\n\n      // If peaks are provided, render them and fire the `waveform-ready` event.\n      if (peaks) {\n        this.backend.setPeaks(peaks, duration);\n        this.drawBuffer();\n        this.fireEvent('waveform-ready');\n      }\n\n      // If no pre-decoded peaks are provided, or are provided with\n      // forceDecode flag, attempt to download the audio file and decode it\n      // with Web Audio.\n      if ((!peaks || this.params.forceDecode) && this.backend.supportsWebAudio()) {\n        this.getArrayBuffer(url, function (arraybuffer) {\n          _this12.decodeArrayBuffer(arraybuffer, function (buffer) {\n            _this12.backend.buffer = buffer;\n            _this12.backend.setPeaks(null);\n            _this12.drawBuffer();\n            _this12.fireEvent('waveform-ready');\n          });\n        });\n      }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n  }, {\n    key: \"decodeArrayBuffer\",\n    value: function decodeArrayBuffer(arraybuffer, callback) {\n      var _this13 = this;\n      if (!this.isDestroyed) {\n        this.arraybuffer = arraybuffer;\n        this.backend.decodeArrayBuffer(arraybuffer, function (data) {\n          // Only use the decoded data if we haven't been destroyed or\n          // another decode started in the meantime\n          if (!_this13.isDestroyed && _this13.arraybuffer == arraybuffer) {\n            callback(data);\n            _this13.arraybuffer = null;\n          }\n        }, function () {\n          return _this13.fireEvent('error', 'Error decoding audiobuffer');\n        });\n      }\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n  }, {\n    key: \"getArrayBuffer\",\n    value: function getArrayBuffer(url, callback) {\n      var _this14 = this;\n      var options = Object.assign({\n        url: url,\n        responseType: 'arraybuffer'\n      }, this.params.xhr);\n      var request = util.fetchFile(options);\n      this.currentRequest = request;\n      this.tmpEvents.push(request.on('progress', function (e) {\n        _this14.onProgress(e);\n      }), request.on('success', function (data) {\n        callback(data);\n        _this14.currentRequest = null;\n      }), request.on('error', function (e) {\n        _this14.fireEvent('error', e);\n        _this14.currentRequest = null;\n      }));\n      return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(e) {\n      var percentComplete;\n      if (e.lengthComputable) {\n        percentComplete = e.loaded / e.total;\n      } else {\n        // Approximate progress with an asymptotic\n        // function, and assume downloads in the 1-3 MB range.\n        percentComplete = e.loaded / (e.loaded + 1000000);\n      }\n      this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and optionally opens in a new window\n     * as valid JSON Blob instance.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n  }, {\n    key: \"exportPCM\",\n    value: function exportPCM(length, accuracy, noWindow, start, end) {\n      length = length || 1024;\n      start = start || 0;\n      accuracy = accuracy || 10000;\n      noWindow = noWindow || false;\n      var peaks = this.backend.getPeaks(length, start, end);\n      var arr = [].map.call(peaks, function (val) {\n        return Math.round(val * accuracy) / accuracy;\n      });\n      return new Promise(function (resolve, reject) {\n        if (!noWindow) {\n          var blobJSON = new Blob([JSON.stringify(arr)], {\n            type: 'application/json;charset=utf-8'\n          });\n          var objURL = URL.createObjectURL(blobJSON);\n          window.open(objURL);\n          URL.revokeObjectURL(objURL);\n        }\n        resolve(arr);\n      });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `image/png`. Other supported types are\n     * `image/jpeg` and `image/webp`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `image/png`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `image/jpeg` and `image/webp`.\n     * @param {string} type Image data type to return. Either `dataURL` (default)\n     * or `blob`.\n     * @return {string|string[]|Promise} When using `dataURL` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `blob` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n  }, {\n    key: \"exportImage\",\n    value: function exportImage(format, quality, type) {\n      if (!format) {\n        format = 'image/png';\n      }\n      if (!quality) {\n        quality = 1;\n      }\n      if (!type) {\n        type = 'dataURL';\n      }\n      return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n  }, {\n    key: \"cancelAjax\",\n    value: function cancelAjax() {\n      if (this.currentRequest && this.currentRequest.controller) {\n        // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\n        // See: Wavesurfer issue #2042\n        // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n        if (this.currentRequest._reader) {\n          // Ignoring exceptions thrown by call to cancel()\n          this.currentRequest._reader.cancel().catch(function (err) {});\n        }\n        this.currentRequest.controller.abort();\n        this.currentRequest = null;\n      }\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"clearTmpEvents\",\n    value: function clearTmpEvents() {\n      this.tmpEvents.forEach(function (e) {\n        return e.un();\n      });\n    }\n\n    /**\n     * Display empty waveform.\n     */\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      if (!this.backend.isPaused()) {\n        this.stop();\n        this.backend.disconnectSource();\n      }\n      this.isReady = false;\n      this.cancelAjax();\n      this.clearTmpEvents();\n\n      // empty drawer\n      this.drawer.progress(0);\n      this.drawer.setWidth(0);\n      this.drawer.drawPeaks({\n        length: this.drawer.getWidth()\n      }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyAllPlugins();\n      this.fireEvent('destroy');\n      this.cancelAjax();\n      this.clearTmpEvents();\n      this.unAll();\n      if (this.params.responsive !== false) {\n        window.removeEventListener('resize', this._onResize, true);\n        window.removeEventListener('orientationchange', this._onResize, true);\n      }\n      if (this.backend) {\n        this.backend.destroy();\n        // clears memory usage\n        this.backend = null;\n      }\n      if (this.drawer) {\n        this.drawer.destroy();\n      }\n      this.isDestroyed = true;\n      this.isReady = false;\n      this.arraybuffer = null;\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    function create(params) {\n      var wavesurfer = new WaveSurfer(params);\n      return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n  }]);\n  return WaveSurfer;\n}(util.Observer);\nexports[\"default\"] = WaveSurfer;\n_defineProperty(WaveSurfer, \"VERSION\", \"6.6.4\");\n/**\n * Functions in the `util` property are available as a static property of the\n * WaveSurfer class\n *\n * @type {Object}\n * @example\n * WaveSurfer.util.style(myElement, { background: 'blue' });\n */\n_defineProperty(WaveSurfer, \"util\", util);\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./src/webaudio.js\":\n/*!*************************!*\\\n  !*** ./src/webaudio.js ***!\n  \\*************************/\n/***/ ((module, exports, __nested_webpack_require_193053__) => {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar util = _interopRequireWildcard(__nested_webpack_require_193053__(/*! ./util */ \"./src/util/index.js\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n// using constants to prevent someone writing the string wrong\nvar PLAYING = 'playing';\nvar PAUSED = 'paused';\nvar FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {util.Observer}\n */\nvar WebAudio = /*#__PURE__*/function (_util$Observer) {\n  _inherits(WebAudio, _util$Observer);\n  var _super = _createSuper(WebAudio);\n  /**\n   * Construct the backend\n   *\n   * @param {WavesurferParams} params Wavesurfer parameters\n   */\n  function WebAudio(params) {\n    var _defineProperty2, _this$states;\n    var _this;\n    _classCallCheck(this, WebAudio);\n    _this = _super.call(this);\n    /** @private */\n    /** audioContext: allows to process audio with WebAudio API */\n    _defineProperty(_assertThisInitialized(_this), \"audioContext\", null);\n    /** @private */\n    _defineProperty(_assertThisInitialized(_this), \"stateBehaviors\", (_defineProperty2 = {}, _defineProperty(_defineProperty2, PLAYING, {\n      init: function init() {\n        this.addOnAudioProcess();\n      },\n      getPlayedPercents: function getPlayedPercents() {\n        var duration = this.getDuration();\n        return this.getCurrentTime() / duration || 0;\n      },\n      getCurrentTime: function getCurrentTime() {\n        return this.startPosition + this.getPlayedTime();\n      }\n    }), _defineProperty(_defineProperty2, PAUSED, {\n      init: function init() {},\n      getPlayedPercents: function getPlayedPercents() {\n        var duration = this.getDuration();\n        return this.getCurrentTime() / duration || 0;\n      },\n      getCurrentTime: function getCurrentTime() {\n        return this.startPosition;\n      }\n    }), _defineProperty(_defineProperty2, FINISHED, {\n      init: function init() {\n        this.fireEvent('finish');\n      },\n      getPlayedPercents: function getPlayedPercents() {\n        return 1;\n      },\n      getCurrentTime: function getCurrentTime() {\n        return this.getDuration();\n      }\n    }), _defineProperty2));\n    _this.params = params;\n    /** ac: Audio Context instance */\n    _this.ac = params.audioContext || (_this.supportsWebAudio() ? _this.getAudioContext() : {});\n    /**@private */\n    _this.lastPlay = _this.ac.currentTime;\n    /** @private */\n    _this.startPosition = 0;\n    /** @private */\n    _this.scheduledPause = null;\n    /** @private */\n    _this.states = (_this$states = {}, _defineProperty(_this$states, PLAYING, Object.create(_this.stateBehaviors[PLAYING])), _defineProperty(_this$states, PAUSED, Object.create(_this.stateBehaviors[PAUSED])), _defineProperty(_this$states, FINISHED, Object.create(_this.stateBehaviors[FINISHED])), _this$states);\n    /** @private */\n    _this.buffer = null;\n    /** @private */\n    _this.filters = [];\n    /** gainNode: allows to control audio volume */\n    _this.gainNode = null;\n    /** @private */\n    _this.mergedPeaks = null;\n    /** @private */\n    _this.offlineAc = null;\n    /** @private */\n    _this.peaks = null;\n    /** @private */\n    _this.playbackRate = 1;\n    /** analyser: provides audio analysis information */\n    _this.analyser = null;\n    /** scriptNode: allows processing audio */\n    _this.scriptNode = null;\n    /** @private */\n    _this.source = null;\n    /** @private */\n    _this.splitPeaks = [];\n    /** @private */\n    _this.state = null;\n    /** @private */\n    _this.explicitDuration = params.duration;\n    /** @private */\n    _this.sinkStreamDestination = null;\n    /** @private */\n    _this.sinkAudioElement = null;\n    /**\n     * Boolean indicating if the backend was destroyed.\n     */\n    _this.destroyed = false;\n    return _this;\n  }\n\n  /**\n   * Initialise the backend, called in `wavesurfer.createBackend()`\n   */\n  _createClass(WebAudio, [{\n    key: \"supportsWebAudio\",\n    value:\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    function supportsWebAudio() {\n      return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n  }, {\n    key: \"getAudioContext\",\n    value: function getAudioContext() {\n      if (!window.WaveSurferAudioContext) {\n        window.WaveSurferAudioContext = new (window.AudioContext || window.webkitAudioContext)();\n      }\n      return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n  }, {\n    key: \"getOfflineAudioContext\",\n    value: function getOfflineAudioContext(sampleRate) {\n      if (!window.WaveSurferOfflineAudioContext) {\n        window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext || window.webkitOfflineAudioContext)(1, 2, sampleRate);\n      }\n      return window.WaveSurferOfflineAudioContext;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.createVolumeNode();\n      this.createScriptNode();\n      this.createAnalyserNode();\n      this.setState(PAUSED);\n      this.setPlaybackRate(this.params.audioRate);\n      this.setLength(0);\n    }\n\n    /** @private */\n  }, {\n    key: \"disconnectFilters\",\n    value: function disconnectFilters() {\n      if (this.filters) {\n        this.filters.forEach(function (filter) {\n          filter && filter.disconnect();\n        });\n        this.filters = null;\n        // Reconnect direct path\n        this.analyser.connect(this.gainNode);\n      }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      if (this.state !== this.states[state]) {\n        this.state = this.states[state];\n        this.state.init.call(this);\n      }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n  }, {\n    key: \"setFilter\",\n    value: function setFilter() {\n      for (var _len = arguments.length, filters = new Array(_len), _key = 0; _key < _len; _key++) {\n        filters[_key] = arguments[_key];\n      }\n      this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n  }, {\n    key: \"setFilters\",\n    value: function setFilters(filters) {\n      // Remove existing filters\n      this.disconnectFilters();\n\n      // Insert filters if filter array not empty\n      if (filters && filters.length) {\n        this.filters = filters;\n\n        // Disconnect direct path before inserting filters\n        this.analyser.disconnect();\n\n        // Connect each filter in turn\n        filters.reduce(function (prev, curr) {\n          prev.connect(curr);\n          return curr;\n        }, this.analyser).connect(this.gainNode);\n      }\n    }\n    /** Create ScriptProcessorNode to process audio */\n  }, {\n    key: \"createScriptNode\",\n    value: function createScriptNode() {\n      if (this.params.audioScriptProcessor) {\n        this.scriptNode = this.params.audioScriptProcessor;\n        this.scriptNode.connect(this.ac.destination);\n      }\n    }\n\n    /** @private */\n  }, {\n    key: \"addOnAudioProcess\",\n    value: function addOnAudioProcess() {\n      var _this2 = this;\n      var loop = function loop() {\n        var time = _this2.getCurrentTime();\n        if (time >= _this2.getDuration() && _this2.state !== _this2.states[FINISHED]) {\n          _this2.setState(FINISHED);\n          _this2.fireEvent('pause');\n        } else if (time >= _this2.scheduledPause && _this2.state !== _this2.states[PAUSED]) {\n          _this2.pause();\n        } else if (_this2.state === _this2.states[PLAYING]) {\n          _this2.fireEvent('audioprocess', time);\n          util.frame(loop)();\n        }\n      };\n      loop();\n    }\n\n    /** Create analyser node to perform audio analysis */\n  }, {\n    key: \"createAnalyserNode\",\n    value: function createAnalyserNode() {\n      this.analyser = this.ac.createAnalyser();\n      this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n  }, {\n    key: \"createVolumeNode\",\n    value: function createVolumeNode() {\n      // Create gain node using the AudioContext\n      if (this.ac.createGain) {\n        this.gainNode = this.ac.createGain();\n      } else {\n        this.gainNode = this.ac.createGainNode();\n      }\n      // Add the gain node to the graph\n      this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n  }, {\n    key: \"setSinkId\",\n    value: function setSinkId(deviceId) {\n      if (deviceId) {\n        /**\n         * The webaudio API doesn't currently support setting the device\n         * output. Here we create an HTMLAudioElement, connect the\n         * webaudio stream to that element and setSinkId there.\n         */\n        if (!this.sinkAudioElement) {\n          this.sinkAudioElement = new window.Audio();\n          // autoplay is necessary since we're not invoking .play()\n          this.sinkAudioElement.autoplay = true;\n        }\n        if (!this.sinkAudioElement.setSinkId) {\n          return Promise.reject(new Error('setSinkId is not supported in your browser'));\n        }\n        if (!this.sinkStreamDestination) {\n          this.sinkStreamDestination = this.ac.createMediaStreamDestination();\n        }\n        this.gainNode.disconnect();\n        this.gainNode.connect(this.sinkStreamDestination);\n        this.sinkAudioElement.srcObject = this.sinkStreamDestination.stream;\n        return this.sinkAudioElement.setSinkId(deviceId);\n      } else {\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n      }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(value) {\n      this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n  }, {\n    key: \"getVolume\",\n    value: function getVolume() {\n      return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n  }, {\n    key: \"decodeArrayBuffer\",\n    value: function decodeArrayBuffer(arraybuffer, callback, errback) {\n      if (!this.offlineAc) {\n        this.offlineAc = this.getOfflineAudioContext(this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100);\n      }\n      if ('webkitAudioContext' in window) {\n        // Safari: no support for Promise-based decodeAudioData enabled\n        // Enable it in Safari using the Experimental Features > Modern WebAudio API option\n        this.offlineAc.decodeAudioData(arraybuffer, function (data) {\n          return callback(data);\n        }, errback);\n      } else {\n        this.offlineAc.decodeAudioData(arraybuffer).then(function (data) {\n          return callback(data);\n        }).catch(function (err) {\n          return errback(err);\n        });\n      }\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n  }, {\n    key: \"setPeaks\",\n    value: function setPeaks(peaks, duration) {\n      if (duration != null) {\n        this.explicitDuration = duration;\n      }\n      this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n  }, {\n    key: \"setLength\",\n    value: function setLength(length) {\n      // No resize, we can preserve the cached peaks.\n      if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n        return;\n      }\n      this.splitPeaks = [];\n      this.mergedPeaks = [];\n      // Set the last element of the sparse array so the peak arrays are\n      // appropriately sized for other calculations.\n      var channels = this.buffer ? this.buffer.numberOfChannels : 1;\n      var c;\n      for (c = 0; c < channels; c++) {\n        this.splitPeaks[c] = [];\n        this.splitPeaks[c][2 * (length - 1)] = 0;\n        this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n      }\n      this.mergedPeaks[2 * (length - 1)] = 0;\n      this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n  }, {\n    key: \"getPeaks\",\n    value: function getPeaks(length, first, last) {\n      if (this.peaks) {\n        return this.peaks;\n      }\n      if (!this.buffer) {\n        return [];\n      }\n      first = first || 0;\n      last = last || length - 1;\n      this.setLength(length);\n      if (!this.buffer) {\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n      }\n\n      /**\n       * The following snippet fixes a buffering data issue on the Safari\n       * browser which returned undefined It creates the missing buffer based\n       * on 1 channel, 4096 samples and the sampleRate from the current\n       * webaudio context 4096 samples seemed to be the best fit for rendering\n       * will review this code once a stable version of Safari TP is out\n       */\n      if (!this.buffer.length) {\n        var newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n        this.buffer = newBuffer.buffer;\n      }\n      var sampleSize = this.buffer.length / length;\n      var sampleStep = ~~(sampleSize / 10) || 1;\n      var channels = this.buffer.numberOfChannels;\n      var c;\n      for (c = 0; c < channels; c++) {\n        var peaks = this.splitPeaks[c];\n        var chan = this.buffer.getChannelData(c);\n        var i = void 0;\n        for (i = first; i <= last; i++) {\n          var start = ~~(i * sampleSize);\n          var end = ~~(start + sampleSize);\n          /**\n           * Initialize the max and min to the first sample of this\n           * subrange, so that even if the samples are entirely\n           * on one side of zero, we still return the true max and\n           * min values in the subrange.\n           */\n          var min = chan[start];\n          var max = min;\n          var j = void 0;\n          for (j = start; j < end; j += sampleStep) {\n            var value = chan[j];\n            if (value > max) {\n              max = value;\n            }\n            if (value < min) {\n              min = value;\n            }\n          }\n          peaks[2 * i] = max;\n          peaks[2 * i + 1] = min;\n          if (c == 0 || max > this.mergedPeaks[2 * i]) {\n            this.mergedPeaks[2 * i] = max;\n          }\n          if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n            this.mergedPeaks[2 * i + 1] = min;\n          }\n        }\n      }\n      return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n  }, {\n    key: \"getPlayedPercents\",\n    value: function getPlayedPercents() {\n      return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n  }, {\n    key: \"disconnectSource\",\n    value: function disconnectSource() {\n      if (this.source) {\n        this.source.disconnect();\n      }\n    }\n    /**\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n     */\n  }, {\n    key: \"destroyWebAudio\",\n    value: function destroyWebAudio() {\n      this.disconnectFilters();\n      this.disconnectSource();\n      this.gainNode.disconnect();\n      this.scriptNode && this.scriptNode.disconnect();\n      this.analyser.disconnect();\n\n      // close the audioContext if closeAudioContext option is set to true\n      if (this.params.closeAudioContext) {\n        // check if browser supports AudioContext.close()\n        if (typeof this.ac.close === 'function' && this.ac.state != 'closed') {\n          this.ac.close();\n        }\n        // clear the reference to the audiocontext\n        this.ac = null;\n        // clear the actual audiocontext, either passed as param or the\n        // global singleton\n        if (!this.params.audioContext) {\n          window.WaveSurferAudioContext = null;\n        } else {\n          this.params.audioContext = null;\n        }\n        // clear the offlineAudioContext\n        window.WaveSurferOfflineAudioContext = null;\n      }\n\n      // disconnect resources used by setSinkId\n      if (this.sinkStreamDestination) {\n        this.sinkAudioElement.pause();\n        this.sinkAudioElement.srcObject = null;\n        this.sinkStreamDestination.disconnect();\n        this.sinkStreamDestination = null;\n      }\n    }\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (!this.isPaused()) {\n        this.pause();\n      }\n      this.unAll();\n      this.buffer = null;\n      this.destroyed = true;\n      this.destroyWebAudio();\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n  }, {\n    key: \"load\",\n    value: function load(buffer) {\n      this.startPosition = 0;\n      this.lastPlay = this.ac.currentTime;\n      this.buffer = buffer;\n      this.createSource();\n    }\n\n    /** @private */\n  }, {\n    key: \"createSource\",\n    value: function createSource() {\n      this.disconnectSource();\n      this.source = this.ac.createBufferSource();\n\n      // adjust for old browsers\n      this.source.start = this.source.start || this.source.noteGrainOn;\n      this.source.stop = this.source.stop || this.source.noteOff;\n      this.setPlaybackRate(this.playbackRate);\n      this.source.buffer = this.buffer;\n      this.source.connect(this.analyser);\n    }\n\n    /**\n     * @private\n     *\n     * some browsers require an explicit call to #resume before they will play back audio\n     */\n  }, {\n    key: \"resumeAudioContext\",\n    value: function resumeAudioContext() {\n      if (this.ac.state == 'suspended') {\n        this.ac.resume && this.ac.resume();\n      }\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n  }, {\n    key: \"isPaused\",\n    value: function isPaused() {\n      return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n  }, {\n    key: \"getDuration\",\n    value: function getDuration() {\n      if (this.explicitDuration) {\n        return this.explicitDuration;\n      }\n      if (!this.buffer) {\n        return 0;\n      }\n      return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n  }, {\n    key: \"seekTo\",\n    value: function seekTo(start, end) {\n      if (!this.buffer) {\n        return;\n      }\n      this.scheduledPause = null;\n      if (start == null) {\n        start = this.getCurrentTime();\n        if (start >= this.getDuration()) {\n          start = 0;\n        }\n      }\n      if (end == null) {\n        end = this.getDuration();\n      }\n      this.startPosition = start;\n      this.lastPlay = this.ac.currentTime;\n      if (this.state === this.states[FINISHED]) {\n        this.setState(PAUSED);\n      }\n      return {\n        start: start,\n        end: end\n      };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n  }, {\n    key: \"getPlayedTime\",\n    value: function getPlayedTime() {\n      return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n  }, {\n    key: \"play\",\n    value: function play(start, end) {\n      if (!this.buffer) {\n        return;\n      }\n\n      // need to re-create source on each playback\n      this.createSource();\n      var adjustedTime = this.seekTo(start, end);\n      start = adjustedTime.start;\n      end = adjustedTime.end;\n      this.scheduledPause = end;\n      this.source.start(0, start);\n      this.resumeAudioContext();\n      this.setState(PLAYING);\n      this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.scheduledPause = null;\n      this.startPosition += this.getPlayedTime();\n      try {\n        this.source && this.source.stop(0);\n      } catch (err) {\n        // Calling stop can throw the following 2 errors:\n        // - RangeError (The value specified for when is negative.)\n        // - InvalidStateNode (The node has not been started by calling start().)\n        // We can safely ignore both errors, because:\n        // - The range is surely correct\n        // - The node might not have been started yet, in which case we just want to carry on without causing any trouble.\n      }\n      this.setState(PAUSED);\n      this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n  }, {\n    key: \"getCurrentTime\",\n    value: function getCurrentTime() {\n      return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n  }, {\n    key: \"getPlaybackRate\",\n    value: function getPlaybackRate() {\n      return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n  }, {\n    key: \"setPlaybackRate\",\n    value: function setPlaybackRate(value) {\n      this.playbackRate = value || 1;\n      this.source && this.source.playbackRate.setValueAtTime(this.playbackRate, this.ac.currentTime);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n  }, {\n    key: \"setPlayEnd\",\n    value: function setPlayEnd(end) {\n      this.scheduledPause = end;\n    }\n  }]);\n  return WebAudio;\n}(util.Observer);\nexports[\"default\"] = WebAudio;\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"./node_modules/debounce/index.js\":\n/*!****************************************!*\\\n  !*** ./node_modules/debounce/index.js ***!\n  \\****************************************/\n/***/ ((module) => {\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_224237__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_224237__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module is referenced by other modules so it can't be inlined\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_224237__(\"./src/wavesurfer.js\");\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});\n//# sourceMappingURL=wavesurfer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/wavesurfer.js/dist/wavesurfer.js\n"));

/***/ })

}]);